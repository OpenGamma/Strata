/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.finance.rate.swaption;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.LongShort;
import com.opengamma.strata.finance.rate.swap.Swap;

/**
 * An option on an underlying swap.
 * <p>
 * A swaption is a financial instrument that provides an option based on the future value of a swap.
 * The option is European, exercised only on the exercise date.
 */
@BeanDefinition
public class Swaption
    implements SwaptionProduct, ImmutableBean, Serializable {

  /**
   * Whether the option is long or short.
   * <p>
   * Long indicates that the owner wants the option to be in the money at expiry.
   * Short indicates that the owner wants the option to be out of the money at expiry.
   */
  @PropertyDefinition
  private final LongShort longShort;
  /**
   * Whether the option is cash settled, defaulted to physical.
   * TODO: cash/physical could be better. There is an enumeration of possibilities in FPML and ISDA definitions
   */
  @PropertyDefinition
  private final boolean cashSettled;
  /**
   * The expiry date of the option.  
   * <p>
   * The option is European, and can only be exercised on the expiration date. 
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate expiryDate;  
  /**
   * The expiry time of the option.  
   * <p>
   * The expiry time is related to the expiration date and time-zone.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalTime expiryTime;
  /**
   * The time-zone of the expiry time.  
   * <p>
   * The expiry time-zone is related to the expiration date and time.
   */
  @PropertyDefinition(validate = "notNull")
  private final ZoneId expiryZone;
  /**
   * The underlying swap.
   * <p>
   * At expiry, if the option is exercised, this swap will be entered into. The swap description is the swap 
   * as viewed by the party long the option. 
   */
  @PropertyDefinition(validate = "notNull")
  private final Swap underlying;

  //-------------------------------------------------------------------------
  /**
   * Gets the expiry date-time.
   * <p>
   * The option expires at this date and time.
   * <p>
   * The result is returned by combining the expiry date, time and time-zone.
   * 
   * @return the expiration date and time
   */
  public ZonedDateTime getExpiryDateTime() {
    return expiryDate.atTime(expiryTime).atZone(expiryZone);
  }

  //-------------------------------------------------------------------------
  /**
   * Expands this option, trivially returning {@code this}.
   * 
   * @return this
   */
  @Override
  public Swaption expand() {
    return this; // TODO: create an expanded version with the expanded underlying swap
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Swaption}.
   * @return the meta-bean, not null
   */
  public static Swaption.Meta meta() {
    return Swaption.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Swaption.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Swaption.Builder builder() {
    return new Swaption.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected Swaption(Swaption.Builder builder) {
    JodaBeanUtils.notNull(builder.expiryDate, "expiryDate");
    JodaBeanUtils.notNull(builder.expiryTime, "expiryTime");
    JodaBeanUtils.notNull(builder.expiryZone, "expiryZone");
    JodaBeanUtils.notNull(builder.underlying, "underlying");
    this.longShort = builder.longShort;
    this.cashSettled = builder.cashSettled;
    this.expiryDate = builder.expiryDate;
    this.expiryTime = builder.expiryTime;
    this.expiryZone = builder.expiryZone;
    this.underlying = builder.underlying;
  }

  @Override
  public Swaption.Meta metaBean() {
    return Swaption.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether the option is long or short.
   * <p>
   * Long indicates that the owner wants the option to be in the money at expiry.
   * Short indicates that the owner wants the option to be out of the money at expiry.
   * @return the value of the property
   */
  public LongShort getLongShort() {
    return longShort;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets whether the option is cash settled, defaulted to physical.
   * TODO: cash/physical could be better. There is an enumeration of possibilities in FPML and ISDA definitions
   * @return the value of the property
   */
  public boolean isCashSettled() {
    return cashSettled;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the expiry date of the option.
   * <p>
   * The option is European, and can only be exercised on the expiration date.
   * @return the value of the property, not null
   */
  public LocalDate getExpiryDate() {
    return expiryDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the expiry time of the option.
   * <p>
   * The expiry time is related to the expiration date and time-zone.
   * @return the value of the property, not null
   */
  public LocalTime getExpiryTime() {
    return expiryTime;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the time-zone of the expiry time.
   * <p>
   * The expiry time-zone is related to the expiration date and time.
   * @return the value of the property, not null
   */
  public ZoneId getExpiryZone() {
    return expiryZone;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying swap.
   * <p>
   * At expiry, if the option is exercised, this swap will be entered into. The swap description is the swap
   * as viewed by the party long the option.
   * @return the value of the property, not null
   */
  public Swap getUnderlying() {
    return underlying;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Swaption other = (Swaption) obj;
      return JodaBeanUtils.equal(getLongShort(), other.getLongShort()) &&
          (isCashSettled() == other.isCashSettled()) &&
          JodaBeanUtils.equal(getExpiryDate(), other.getExpiryDate()) &&
          JodaBeanUtils.equal(getExpiryTime(), other.getExpiryTime()) &&
          JodaBeanUtils.equal(getExpiryZone(), other.getExpiryZone()) &&
          JodaBeanUtils.equal(getUnderlying(), other.getUnderlying());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getLongShort());
    hash = hash * 31 + JodaBeanUtils.hashCode(isCashSettled());
    hash = hash * 31 + JodaBeanUtils.hashCode(getExpiryDate());
    hash = hash * 31 + JodaBeanUtils.hashCode(getExpiryTime());
    hash = hash * 31 + JodaBeanUtils.hashCode(getExpiryZone());
    hash = hash * 31 + JodaBeanUtils.hashCode(getUnderlying());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(224);
    buf.append("Swaption{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("longShort").append('=').append(JodaBeanUtils.toString(getLongShort())).append(',').append(' ');
    buf.append("cashSettled").append('=').append(JodaBeanUtils.toString(isCashSettled())).append(',').append(' ');
    buf.append("expiryDate").append('=').append(JodaBeanUtils.toString(getExpiryDate())).append(',').append(' ');
    buf.append("expiryTime").append('=').append(JodaBeanUtils.toString(getExpiryTime())).append(',').append(' ');
    buf.append("expiryZone").append('=').append(JodaBeanUtils.toString(getExpiryZone())).append(',').append(' ');
    buf.append("underlying").append('=').append(JodaBeanUtils.toString(getUnderlying())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Swaption}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code longShort} property.
     */
    private final MetaProperty<LongShort> longShort = DirectMetaProperty.ofImmutable(
        this, "longShort", Swaption.class, LongShort.class);
    /**
     * The meta-property for the {@code cashSettled} property.
     */
    private final MetaProperty<Boolean> cashSettled = DirectMetaProperty.ofImmutable(
        this, "cashSettled", Swaption.class, Boolean.TYPE);
    /**
     * The meta-property for the {@code expiryDate} property.
     */
    private final MetaProperty<LocalDate> expiryDate = DirectMetaProperty.ofImmutable(
        this, "expiryDate", Swaption.class, LocalDate.class);
    /**
     * The meta-property for the {@code expiryTime} property.
     */
    private final MetaProperty<LocalTime> expiryTime = DirectMetaProperty.ofImmutable(
        this, "expiryTime", Swaption.class, LocalTime.class);
    /**
     * The meta-property for the {@code expiryZone} property.
     */
    private final MetaProperty<ZoneId> expiryZone = DirectMetaProperty.ofImmutable(
        this, "expiryZone", Swaption.class, ZoneId.class);
    /**
     * The meta-property for the {@code underlying} property.
     */
    private final MetaProperty<Swap> underlying = DirectMetaProperty.ofImmutable(
        this, "underlying", Swaption.class, Swap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "longShort",
        "cashSettled",
        "expiryDate",
        "expiryTime",
        "expiryZone",
        "underlying");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 116685664:  // longShort
          return longShort;
        case -871053882:  // cashSettled
          return cashSettled;
        case -816738431:  // expiryDate
          return expiryDate;
        case -816254304:  // expiryTime
          return expiryTime;
        case -816069761:  // expiryZone
          return expiryZone;
        case -1770633379:  // underlying
          return underlying;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Swaption.Builder builder() {
      return new Swaption.Builder();
    }

    @Override
    public Class<? extends Swaption> beanType() {
      return Swaption.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code longShort} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LongShort> longShort() {
      return longShort;
    }

    /**
     * The meta-property for the {@code cashSettled} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Boolean> cashSettled() {
      return cashSettled;
    }

    /**
     * The meta-property for the {@code expiryDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> expiryDate() {
      return expiryDate;
    }

    /**
     * The meta-property for the {@code expiryTime} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalTime> expiryTime() {
      return expiryTime;
    }

    /**
     * The meta-property for the {@code expiryZone} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ZoneId> expiryZone() {
      return expiryZone;
    }

    /**
     * The meta-property for the {@code underlying} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Swap> underlying() {
      return underlying;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 116685664:  // longShort
          return ((Swaption) bean).getLongShort();
        case -871053882:  // cashSettled
          return ((Swaption) bean).isCashSettled();
        case -816738431:  // expiryDate
          return ((Swaption) bean).getExpiryDate();
        case -816254304:  // expiryTime
          return ((Swaption) bean).getExpiryTime();
        case -816069761:  // expiryZone
          return ((Swaption) bean).getExpiryZone();
        case -1770633379:  // underlying
          return ((Swaption) bean).getUnderlying();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Swaption}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<Swaption> {

    private LongShort longShort;
    private boolean cashSettled;
    private LocalDate expiryDate;
    private LocalTime expiryTime;
    private ZoneId expiryZone;
    private Swap underlying;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(Swaption beanToCopy) {
      this.longShort = beanToCopy.getLongShort();
      this.cashSettled = beanToCopy.isCashSettled();
      this.expiryDate = beanToCopy.getExpiryDate();
      this.expiryTime = beanToCopy.getExpiryTime();
      this.expiryZone = beanToCopy.getExpiryZone();
      this.underlying = beanToCopy.getUnderlying();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 116685664:  // longShort
          return longShort;
        case -871053882:  // cashSettled
          return cashSettled;
        case -816738431:  // expiryDate
          return expiryDate;
        case -816254304:  // expiryTime
          return expiryTime;
        case -816069761:  // expiryZone
          return expiryZone;
        case -1770633379:  // underlying
          return underlying;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 116685664:  // longShort
          this.longShort = (LongShort) newValue;
          break;
        case -871053882:  // cashSettled
          this.cashSettled = (Boolean) newValue;
          break;
        case -816738431:  // expiryDate
          this.expiryDate = (LocalDate) newValue;
          break;
        case -816254304:  // expiryTime
          this.expiryTime = (LocalTime) newValue;
          break;
        case -816069761:  // expiryZone
          this.expiryZone = (ZoneId) newValue;
          break;
        case -1770633379:  // underlying
          this.underlying = (Swap) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public Swaption build() {
      return new Swaption(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code longShort} property in the builder.
     * @param longShort  the new value
     * @return this, for chaining, not null
     */
    public Builder longShort(LongShort longShort) {
      this.longShort = longShort;
      return this;
    }

    /**
     * Sets the {@code cashSettled} property in the builder.
     * @param cashSettled  the new value
     * @return this, for chaining, not null
     */
    public Builder cashSettled(boolean cashSettled) {
      this.cashSettled = cashSettled;
      return this;
    }

    /**
     * Sets the {@code expiryDate} property in the builder.
     * @param expiryDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder expiryDate(LocalDate expiryDate) {
      JodaBeanUtils.notNull(expiryDate, "expiryDate");
      this.expiryDate = expiryDate;
      return this;
    }

    /**
     * Sets the {@code expiryTime} property in the builder.
     * @param expiryTime  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder expiryTime(LocalTime expiryTime) {
      JodaBeanUtils.notNull(expiryTime, "expiryTime");
      this.expiryTime = expiryTime;
      return this;
    }

    /**
     * Sets the {@code expiryZone} property in the builder.
     * @param expiryZone  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder expiryZone(ZoneId expiryZone) {
      JodaBeanUtils.notNull(expiryZone, "expiryZone");
      this.expiryZone = expiryZone;
      return this;
    }

    /**
     * Sets the {@code underlying} property in the builder.
     * @param underlying  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder underlying(Swap underlying) {
      JodaBeanUtils.notNull(underlying, "underlying");
      this.underlying = underlying;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(224);
      buf.append("Swaption.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("longShort").append('=').append(JodaBeanUtils.toString(longShort)).append(',').append(' ');
      buf.append("cashSettled").append('=').append(JodaBeanUtils.toString(cashSettled)).append(',').append(' ');
      buf.append("expiryDate").append('=').append(JodaBeanUtils.toString(expiryDate)).append(',').append(' ');
      buf.append("expiryTime").append('=').append(JodaBeanUtils.toString(expiryTime)).append(',').append(' ');
      buf.append("expiryZone").append('=').append(JodaBeanUtils.toString(expiryZone)).append(',').append(' ');
      buf.append("underlying").append('=').append(JodaBeanUtils.toString(underlying)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
