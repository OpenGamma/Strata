/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.calc.runner;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.CalculationTarget;

/**
 * A set of related calculation results for a single calculation target.
 * <p>
 * This contains a list of {@link CalculationResult}, produced by a single {@link CalculationTask}.
 * Each individual result relates to a single cell in the output grid.
 */
@BeanDefinition(builderScope = "private")
public final class CalculationResults implements ImmutableBean, Serializable {

  /**
   * The target of the calculation, often a trade.
   */
  @PropertyDefinition(validate = "notNull")
  private final CalculationTarget target;
  /**
   * The calculated cells.
   * Each entry contains a calculation result for a single cell.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<CalculationResult> cells;

  //-------------------------------------------------------------------------
  /**
   * Obtains a calculation result from individual calculations.
   * 
   * @param target  the calculation target, such as a trade
   * @param results  the results of the calculation
   * @return the calculation result
   */
  public static CalculationResults of(CalculationTarget target, List<CalculationResult> results) {
    return new CalculationResults(target, results);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CalculationResults}.
   * @return the meta-bean, not null
   */
  public static CalculationResults.Meta meta() {
    return CalculationResults.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CalculationResults.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private CalculationResults(
      CalculationTarget target,
      List<CalculationResult> cells) {
    JodaBeanUtils.notNull(target, "target");
    JodaBeanUtils.notNull(cells, "cells");
    this.target = target;
    this.cells = ImmutableList.copyOf(cells);
  }

  @Override
  public CalculationResults.Meta metaBean() {
    return CalculationResults.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the target of the calculation, often a trade.
   * @return the value of the property, not null
   */
  public CalculationTarget getTarget() {
    return target;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the calculated cells.
   * Each entry contains a calculation result for a single cell.
   * @return the value of the property, not null
   */
  public ImmutableList<CalculationResult> getCells() {
    return cells;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CalculationResults other = (CalculationResults) obj;
      return JodaBeanUtils.equal(target, other.target) &&
          JodaBeanUtils.equal(cells, other.cells);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(target);
    hash = hash * 31 + JodaBeanUtils.hashCode(cells);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("CalculationResults{");
    buf.append("target").append('=').append(target).append(',').append(' ');
    buf.append("cells").append('=').append(JodaBeanUtils.toString(cells));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CalculationResults}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code target} property.
     */
    private final MetaProperty<CalculationTarget> target = DirectMetaProperty.ofImmutable(
        this, "target", CalculationResults.class, CalculationTarget.class);
    /**
     * The meta-property for the {@code cells} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<CalculationResult>> cells = DirectMetaProperty.ofImmutable(
        this, "cells", CalculationResults.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "target",
        "cells");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -880905839:  // target
          return target;
        case 94544721:  // cells
          return cells;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CalculationResults> builder() {
      return new CalculationResults.Builder();
    }

    @Override
    public Class<? extends CalculationResults> beanType() {
      return CalculationResults.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code target} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CalculationTarget> target() {
      return target;
    }

    /**
     * The meta-property for the {@code cells} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<CalculationResult>> cells() {
      return cells;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -880905839:  // target
          return ((CalculationResults) bean).getTarget();
        case 94544721:  // cells
          return ((CalculationResults) bean).getCells();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CalculationResults}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<CalculationResults> {

    private CalculationTarget target;
    private List<CalculationResult> cells = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -880905839:  // target
          return target;
        case 94544721:  // cells
          return cells;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -880905839:  // target
          this.target = (CalculationTarget) newValue;
          break;
        case 94544721:  // cells
          this.cells = (List<CalculationResult>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CalculationResults build() {
      return new CalculationResults(
          target,
          cells);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("CalculationResults.Builder{");
      buf.append("target").append('=').append(JodaBeanUtils.toString(target)).append(',').append(' ');
      buf.append("cells").append('=').append(JodaBeanUtils.toString(cells));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
