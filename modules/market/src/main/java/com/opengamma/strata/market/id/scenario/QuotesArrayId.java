/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p>
 * Please see distribution for license.
 */
package com.opengamma.strata.market.id.scenario;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.market.FieldName;
import com.opengamma.strata.basics.market.MarketDataBox;
import com.opengamma.strata.basics.market.ScenarioMarketDataId;
import com.opengamma.strata.basics.market.StandardId;
import com.opengamma.strata.collect.array.DoubleArray;
import com.opengamma.strata.market.id.QuoteId;
import com.opengamma.strata.market.value.scenario.QuotesArray;

/**
 * An identifier identifying a {@link QuotesArray} containing values for a piece
 * of quoted market data in multiple scenarios.
 */
@BeanDefinition(builderScope = "private")
public final class QuotesArrayId
    implements ScenarioMarketDataId<Double, QuotesArray>, ImmutableBean {

  /** The market data key identifying the quote. */
  @PropertyDefinition(validate = "notNull")
  private final QuoteId id;

  /**
   * Returns a key identifying the market data with the specified ID and field name.
   *
   * @param id  the ID of the quote
   * @param fieldName  the field name of the market data record containing the quote data
   * @return a key identifying the market data with the specified ID and field name
   */
  public static QuotesArrayId of(StandardId id, FieldName fieldName) {
    return new QuotesArrayId(QuoteId.of(id, fieldName));
  }

  /**
   * Returns a key identifying the same market data as the quote key.
   *
   * @param quoteId  key identifying the quote
   * @return a key identifying the same market data as the quote key
   */
  public static QuotesArrayId of(QuoteId quoteId) {
    return new QuotesArrayId(quoteId);
  }

  @Override
  public QuoteId getMarketDataId() {
    return id;
  }

  @Override
  public Class<QuotesArray> getScenarioMarketDataType() {
    return QuotesArray.class;
  }

  @Override
  public QuotesArray createScenarioValue(MarketDataBox<Double> marketDataBox, int scenarioCount) {
    return QuotesArray.of(DoubleArray.of(scenarioCount, i -> marketDataBox.getValue(i)));
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code QuotesArrayId}.
   * @return the meta-bean, not null
   */
  public static QuotesArrayId.Meta meta() {
    return QuotesArrayId.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(QuotesArrayId.Meta.INSTANCE);
  }

  private QuotesArrayId(
      QuoteId id) {
    JodaBeanUtils.notNull(id, "id");
    this.id = id;
  }

  @Override
  public QuotesArrayId.Meta metaBean() {
    return QuotesArrayId.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the market data key identifying the quote.
   * @return the value of the property, not null
   */
  public QuoteId getId() {
    return id;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      QuotesArrayId other = (QuotesArrayId) obj;
      return JodaBeanUtils.equal(id, other.id);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(id);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("QuotesArrayId{");
    buf.append("id").append('=').append(JodaBeanUtils.toString(id));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code QuotesArrayId}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<QuoteId> id = DirectMetaProperty.ofImmutable(
        this, "id", QuotesArrayId.class, QuoteId.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return id;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends QuotesArrayId> builder() {
      return new QuotesArrayId.Builder();
    }

    @Override
    public Class<? extends QuotesArrayId> beanType() {
      return QuotesArrayId.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public MetaProperty<QuoteId> id() {
      return id;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((QuotesArrayId) bean).getId();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code QuotesArrayId}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<QuotesArrayId> {

    private QuoteId id;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return id;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          this.id = (QuoteId) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public QuotesArrayId build() {
      return new QuotesArrayId(
          id);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("QuotesArrayId.Builder{");
      buf.append("id").append('=').append(JodaBeanUtils.toString(id));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
