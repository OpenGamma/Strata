/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.basics.market;

import java.io.Serializable;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.light.LightMetaBean;

/**
 * ObservableKey implementation used in tests.
 */
@BeanDefinition(style = "light")
public final class TestObservableKey
    implements ImmutableBean, ObservableKey, Serializable {

  @PropertyDefinition(overrideGet = true)
  private final StandardId standardId;

  @PropertyDefinition(overrideGet = true)
  private final FieldName fieldName;

  public static TestObservableKey of(String id) {
    return new TestObservableKey(id, FieldName.MARKET_VALUE);
  }

  public static TestObservableKey of(StandardId id) {
    return new TestObservableKey(id, FieldName.MARKET_VALUE);
  }

  TestObservableKey(String id, FieldName fieldName) {
    this(StandardId.of("test", id), fieldName);
  }

  @Override
  public ObservableId toMarketDataId(MarketDataFeed marketDataFeed) {
    return new TestObservableId(standardId, marketDataFeed);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code TestObservableKey}.
   */
  private static MetaBean META_BEAN = LightMetaBean.of(TestObservableKey.class);

  /**
   * The meta-bean for {@code TestObservableKey}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return META_BEAN;
  }

  static {
    JodaBeanUtils.registerMetaBean(META_BEAN);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private TestObservableKey(
      StandardId standardId,
      FieldName fieldName) {
    this.standardId = standardId;
    this.fieldName = fieldName;
  }

  @Override
  public MetaBean metaBean() {
    return META_BEAN;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the standardId.
   * @return the value of the property
   */
  @Override
  public StandardId getStandardId() {
    return standardId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the fieldName.
   * @return the value of the property
   */
  @Override
  public FieldName getFieldName() {
    return fieldName;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      TestObservableKey other = (TestObservableKey) obj;
      return JodaBeanUtils.equal(standardId, other.standardId) &&
          JodaBeanUtils.equal(fieldName, other.fieldName);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(standardId);
    hash = hash * 31 + JodaBeanUtils.hashCode(fieldName);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("TestObservableKey{");
    buf.append("standardId").append('=').append(standardId).append(',').append(' ');
    buf.append("fieldName").append('=').append(JodaBeanUtils.toString(fieldName));
    buf.append('}');
    return buf.toString();
  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
