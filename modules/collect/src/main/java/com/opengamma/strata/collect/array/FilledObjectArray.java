/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.collect.array;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.collect.Messages;

/**
 * An immutable array of {@code Object} values where every value is the same.
 * <p>
 * This is an optimal form of array for the situation where every value is the same.
 * 
 * @param <T>  the type of the element
 */
@BeanDefinition(builderScope = "private")
final class FilledObjectArray<T>
    implements Array<T>, ImmutableBean, Serializable {

  /**
   * The size of the array.
   */
  @PropertyDefinition(get = "private", validate = "ArgChecker.notNegativeOrZero")
  private final int size;
  /**
   * The single value.
   */
  @PropertyDefinition(get = "private", validate = "notNull")
  private final T value;

  //-------------------------------------------------------------------------
  /**
   * Obtains an immutable array of the specified size where the same value is used for each element.
   * 
   * @param <R>  the type of the value in the array
   * @param size  the size
   * @param value  the value applicable for all elements of the array
   * @return an array of the specified size based on the value
   */
  static <R> FilledObjectArray<R> of(int size, R value) {
    return new FilledObjectArray<R>(size, value);
  }

  //-------------------------------------------------------------------------
  @Override
  public int size() {
    return size;
  }

  @Override
  public T get(int index) {
    if (index < 0 || index >= size) {
      throw new IndexOutOfBoundsException(
          Messages.format("Invalid index, {} not in range from 0 to {}", index, size));
    }
    return value;
  }

  @Override
  public List<T> toList() {
    return Collections.nCopies(size, value);
  }

  @Override
  public Stream<T> stream() {
    return IntStream.range(0, size).mapToObj(i -> value);
  }

  //-------------------------------------------------------------------------
  @Override
  public <R> Array<R> map(Function<T, R> function) {
    R resultValue = function.apply(value);
    return new FilledObjectArray<R>(size, resultValue);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FilledObjectArray}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static FilledObjectArray.Meta meta() {
    return FilledObjectArray.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code FilledObjectArray}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> FilledObjectArray.Meta<R> metaFilledObjectArray(Class<R> cls) {
    return FilledObjectArray.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FilledObjectArray.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private FilledObjectArray(
      int size,
      T value) {
    ArgChecker.notNegativeOrZero(size, "size");
    JodaBeanUtils.notNull(value, "value");
    this.size = size;
    this.value = value;
  }

  @SuppressWarnings("unchecked")
  @Override
  public FilledObjectArray.Meta<T> metaBean() {
    return FilledObjectArray.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the size of the array.
   * @return the value of the property
   */
  private int getSize() {
    return size;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the single value.
   * @return the value of the property, not null
   */
  private T getValue() {
    return value;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FilledObjectArray<?> other = (FilledObjectArray<?>) obj;
      return (size == other.size) &&
          JodaBeanUtils.equal(value, other.value);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(size);
    hash = hash * 31 + JodaBeanUtils.hashCode(value);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("FilledObjectArray{");
    buf.append("size").append('=').append(size).append(',').append(' ');
    buf.append("value").append('=').append(JodaBeanUtils.toString(value));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FilledObjectArray}.
   * @param <T>  the type
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code size} property.
     */
    private final MetaProperty<Integer> size = DirectMetaProperty.ofImmutable(
        this, "size", FilledObjectArray.class, Integer.TYPE);
    /**
     * The meta-property for the {@code value} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<T> value = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "value", FilledObjectArray.class, Object.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "size",
        "value");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3530753:  // size
          return size;
        case 111972721:  // value
          return value;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FilledObjectArray<T>> builder() {
      return new FilledObjectArray.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends FilledObjectArray<T>> beanType() {
      return (Class) FilledObjectArray.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code size} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Integer> size() {
      return size;
    }

    /**
     * The meta-property for the {@code value} property.
     * @return the meta-property, not null
     */
    public MetaProperty<T> value() {
      return value;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3530753:  // size
          return ((FilledObjectArray<?>) bean).getSize();
        case 111972721:  // value
          return ((FilledObjectArray<?>) bean).getValue();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FilledObjectArray}.
   * @param <T>  the type
   */
  private static final class Builder<T> extends DirectFieldsBeanBuilder<FilledObjectArray<T>> {

    private int size;
    private T value;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3530753:  // size
          return size;
        case 111972721:  // value
          return value;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3530753:  // size
          this.size = (Integer) newValue;
          break;
        case 111972721:  // value
          this.value = (T) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public FilledObjectArray<T> build() {
      return new FilledObjectArray<T>(
          size,
          value);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("FilledObjectArray.Builder{");
      buf.append("size").append('=').append(JodaBeanUtils.toString(size)).append(',').append(' ');
      buf.append("value").append('=').append(JodaBeanUtils.toString(value));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
