/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.collect.array;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.stream.Stream;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;

/**
 * An immutable array of {@code Object} values.
 * <p>
 * This provides a cut down version of {@link List} that implements {@link Array}.
 * <p>
 * It is intended that the array does not contain {@code null}, however this is not validated.
 * 
 * @param <T>  the type of the element
 */
@BeanDefinition(builderScope = "private")
final class ObjectArray<T>
    implements Array<T>, ImmutableBean, Serializable {

  /**
   * An empty array.
   */
  private static final ObjectArray<Object> EMPTY = new ObjectArray<Object>(ImmutableList.of());

  /**
   * The underlying list.
   */
  @PropertyDefinition(get = "private")
  private final ImmutableList<T> list;

  //-------------------------------------------------------------------------
  /**
   * Obtains an empty immutable array.
   * 
   * @param <R>  the type of the value in the array
   * @return the empty immutable array
   */
  @SuppressWarnings("unchecked")
  static <R> ObjectArray<R> empty() {
    return (ObjectArray<R>) EMPTY;
  }

  /**
   * Obtains an instance from a list.
   * 
   * @param <R>  the type of the value in the array
   * @param values  the values
   * @return an array containing the specified values
   */
  static <R> ObjectArray<R> of(List<? extends R> values) {
    if (values.size() == 0) {
      return empty();
    }
    return new ObjectArray<R>(ImmutableList.copyOf(values));
  }

  //-------------------------------------------------------------------------
  /**
   * Creates an instance.
   * 
   * @param list  the list
   */
  private ObjectArray(ImmutableList<T> list) {
    this.list = list;
  }

  //-------------------------------------------------------------------------
  @Override
  public int size() {
    return list.size();
  }

  @Override
  public T get(int index) {
    return list.get(index);
  }

  @Override
  public List<T> toList() {
    return list;
  }

  @Override
  public Stream<T> stream() {
    return list.stream();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ObjectArray}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static ObjectArray.Meta meta() {
    return ObjectArray.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code ObjectArray}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> ObjectArray.Meta<R> metaObjectArray(Class<R> cls) {
    return ObjectArray.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ObjectArray.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private ObjectArray(
      List<T> list) {
    this.list = (list != null ? ImmutableList.copyOf(list) : null);
  }

  @SuppressWarnings("unchecked")
  @Override
  public ObjectArray.Meta<T> metaBean() {
    return ObjectArray.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying list.
   * @return the value of the property
   */
  private ImmutableList<T> getList() {
    return list;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ObjectArray<?> other = (ObjectArray<?>) obj;
      return JodaBeanUtils.equal(list, other.list);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(list);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("ObjectArray{");
    buf.append("list").append('=').append(JodaBeanUtils.toString(list));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ObjectArray}.
   * @param <T>  the type
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code list} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<T>> list = DirectMetaProperty.ofImmutable(
        this, "list", ObjectArray.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "list");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3322014:  // list
          return list;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ObjectArray<T>> builder() {
      return new ObjectArray.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends ObjectArray<T>> beanType() {
      return (Class) ObjectArray.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code list} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<T>> list() {
      return list;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3322014:  // list
          return ((ObjectArray<?>) bean).getList();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ObjectArray}.
   * @param <T>  the type
   */
  private static final class Builder<T> extends DirectFieldsBeanBuilder<ObjectArray<T>> {

    private List<T> list;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3322014:  // list
          return list;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3322014:  // list
          this.list = (List<T>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ObjectArray<T> build() {
      return new ObjectArray<T>(
          list);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("ObjectArray.Builder{");
      buf.append("list").append('=').append(JodaBeanUtils.toString(list));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
