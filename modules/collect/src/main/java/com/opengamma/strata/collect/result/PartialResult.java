/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.collect.result;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableList;

/**
 * The result of an operation that may partially succeed and partially fail.
 * <p>
 * A partial result captures the use case where the application should continue in the event of failure.
 * The classic example is loading rows from a file, when some rows are valid and some are invalid.
 * The partial result would contain both the successful rows and failures for each failed row.
 * Note that the list of failures may be empty.
 *
 * @param <T> the type of the underlying success result, typically a collection type
 */
@BeanDefinition(builderScope = "private")
public final class PartialResult<T>
    implements ImmutableBean, Serializable {

  /**
   * The successful results.
   */
  @PropertyDefinition(validate = "notNull")
  private final T value;
  /**
   * The failure results.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableList<FailureItem> failures;

  //-------------------------------------------------------------------------
  /**
   * Creates a partial result wrapping the success value and failures.
   *
   * @param <T>  the type of the success value
   * @param successValue  the success value
   * @param failures  the failures
   * @return a partial result wrapping the value and failures
   */
  public static <T> PartialResult<T> of(T successValue, FailureItem... failures) {
    return new PartialResult<>(successValue, ImmutableList.copyOf(failures));
  }

  /**
   * Creates a partial result wrapping the success value and failures.
   *
   * @param <T>  the type of the success value
   * @param successValue  the success value
   * @param failures  the failures
   * @return a partial result wrapping the value and failures
   */
  public static <T> PartialResult<T> of(T successValue, List<FailureItem> failures) {
    return new PartialResult<>(successValue, failures);
  }

  //-------------------------------------------------------------------------
  /**
   * Checks if there are any failures.
   *
   * @return true if the result has any failures
   */
  public boolean hasFailures() {
    return !failures.isEmpty();
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code PartialResult}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static PartialResult.Meta meta() {
    return PartialResult.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code PartialResult}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R> PartialResult.Meta<R> metaPartialResult(Class<R> cls) {
    return PartialResult.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(PartialResult.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private PartialResult(
      T value,
      List<FailureItem> failures) {
    JodaBeanUtils.notNull(value, "value");
    JodaBeanUtils.notNull(failures, "failures");
    this.value = value;
    this.failures = ImmutableList.copyOf(failures);
  }

  @SuppressWarnings("unchecked")
  @Override
  public PartialResult.Meta<T> metaBean() {
    return PartialResult.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the successful results.
   * @return the value of the property, not null
   */
  public T getValue() {
    return value;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the failure results.
   * @return the value of the property, not null
   */
  public ImmutableList<FailureItem> getFailures() {
    return failures;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      PartialResult<?> other = (PartialResult<?>) obj;
      return JodaBeanUtils.equal(value, other.value) &&
          JodaBeanUtils.equal(failures, other.failures);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(value);
    hash = hash * 31 + JodaBeanUtils.hashCode(failures);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("PartialResult{");
    buf.append("value").append('=').append(value).append(',').append(' ');
    buf.append("failures").append('=').append(JodaBeanUtils.toString(failures));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code PartialResult}.
   * @param <T>  the type
   */
  public static final class Meta<T> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code value} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<T> value = (DirectMetaProperty) DirectMetaProperty.ofImmutable(
        this, "value", PartialResult.class, Object.class);
    /**
     * The meta-property for the {@code failures} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<FailureItem>> failures = DirectMetaProperty.ofImmutable(
        this, "failures", PartialResult.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "value",
        "failures");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 111972721:  // value
          return value;
        case 675938345:  // failures
          return failures;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends PartialResult<T>> builder() {
      return new PartialResult.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends PartialResult<T>> beanType() {
      return (Class) PartialResult.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code value} property.
     * @return the meta-property, not null
     */
    public MetaProperty<T> value() {
      return value;
    }

    /**
     * The meta-property for the {@code failures} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<FailureItem>> failures() {
      return failures;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 111972721:  // value
          return ((PartialResult<?>) bean).getValue();
        case 675938345:  // failures
          return ((PartialResult<?>) bean).getFailures();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code PartialResult}.
   * @param <T>  the type
   */
  private static final class Builder<T> extends DirectFieldsBeanBuilder<PartialResult<T>> {

    private T value;
    private List<FailureItem> failures = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 111972721:  // value
          return value;
        case 675938345:  // failures
          return failures;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 111972721:  // value
          this.value = (T) newValue;
          break;
        case 675938345:  // failures
          this.failures = (List<FailureItem>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public PartialResult<T> build() {
      return new PartialResult<T>(
          value,
          failures);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("PartialResult.Builder{");
      buf.append("value").append('=').append(JodaBeanUtils.toString(value)).append(',').append(' ');
      buf.append("failures").append('=').append(JodaBeanUtils.toString(failures));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
