package com.opengamma.strata.product.corporateaction;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.product.common.PayReceive;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

@BeanDefinition
public class ImmutableCorporateActionWillGetCashLeg
    implements CorporateActionWillGetCashLeg, ImmutableBean, Serializable  {

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final PayReceive payReceive;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final LocalDate paymentDate;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final CurrencyAmount currencyAmount;
  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionWillGetCashLeg}.
   * @return the meta-bean, not null
   */
  public static ImmutableCorporateActionWillGetCashLeg.Meta meta() {
    return ImmutableCorporateActionWillGetCashLeg.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ImmutableCorporateActionWillGetCashLeg.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ImmutableCorporateActionWillGetCashLeg.Builder builder() {
    return new ImmutableCorporateActionWillGetCashLeg.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected ImmutableCorporateActionWillGetCashLeg(ImmutableCorporateActionWillGetCashLeg.Builder builder) {
    JodaBeanUtils.notNull(builder.payReceive, "payReceive");
    JodaBeanUtils.notNull(builder.paymentDate, "paymentDate");
    JodaBeanUtils.notNull(builder.currencyAmount, "currencyAmount");
    this.payReceive = builder.payReceive;
    this.paymentDate = builder.paymentDate;
    this.currencyAmount = builder.currencyAmount;
  }

  @Override
  public ImmutableCorporateActionWillGetCashLeg.Meta metaBean() {
    return ImmutableCorporateActionWillGetCashLeg.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the payReceive.
   * @return the value of the property, not null
   */
  @Override
  public PayReceive getPayReceive() {
    return payReceive;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the paymentDate.
   * @return the value of the property, not null
   */
  @Override
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currencyAmount.
   * @return the value of the property, not null
   */
  @Override
  public CurrencyAmount getCurrencyAmount() {
    return currencyAmount;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableCorporateActionWillGetCashLeg other = (ImmutableCorporateActionWillGetCashLeg) obj;
      return JodaBeanUtils.equal(payReceive, other.payReceive) &&
          JodaBeanUtils.equal(paymentDate, other.paymentDate) &&
          JodaBeanUtils.equal(currencyAmount, other.currencyAmount);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(payReceive);
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(currencyAmount);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("ImmutableCorporateActionWillGetCashLeg{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("payReceive").append('=').append(JodaBeanUtils.toString(payReceive)).append(',').append(' ');
    buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate)).append(',').append(' ');
    buf.append("currencyAmount").append('=').append(JodaBeanUtils.toString(currencyAmount)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionWillGetCashLeg}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code payReceive} property.
     */
    private final MetaProperty<PayReceive> payReceive = DirectMetaProperty.ofImmutable(
        this, "payReceive", ImmutableCorporateActionWillGetCashLeg.class, PayReceive.class);
    /**
     * The meta-property for the {@code paymentDate} property.
     */
    private final MetaProperty<LocalDate> paymentDate = DirectMetaProperty.ofImmutable(
        this, "paymentDate", ImmutableCorporateActionWillGetCashLeg.class, LocalDate.class);
    /**
     * The meta-property for the {@code currencyAmount} property.
     */
    private final MetaProperty<CurrencyAmount> currencyAmount = DirectMetaProperty.ofImmutable(
        this, "currencyAmount", ImmutableCorporateActionWillGetCashLeg.class, CurrencyAmount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "payReceive",
        "paymentDate",
        "currencyAmount");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -885469925:  // payReceive
          return payReceive;
        case -1540873516:  // paymentDate
          return paymentDate;
        case -838788151:  // currencyAmount
          return currencyAmount;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ImmutableCorporateActionWillGetCashLeg.Builder builder() {
      return new ImmutableCorporateActionWillGetCashLeg.Builder();
    }

    @Override
    public Class<? extends ImmutableCorporateActionWillGetCashLeg> beanType() {
      return ImmutableCorporateActionWillGetCashLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code payReceive} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<PayReceive> payReceive() {
      return payReceive;
    }

    /**
     * The meta-property for the {@code paymentDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> paymentDate() {
      return paymentDate;
    }

    /**
     * The meta-property for the {@code currencyAmount} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CurrencyAmount> currencyAmount() {
      return currencyAmount;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -885469925:  // payReceive
          return ((ImmutableCorporateActionWillGetCashLeg) bean).getPayReceive();
        case -1540873516:  // paymentDate
          return ((ImmutableCorporateActionWillGetCashLeg) bean).getPaymentDate();
        case -838788151:  // currencyAmount
          return ((ImmutableCorporateActionWillGetCashLeg) bean).getCurrencyAmount();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableCorporateActionWillGetCashLeg}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<ImmutableCorporateActionWillGetCashLeg> {

    private PayReceive payReceive;
    private LocalDate paymentDate;
    private CurrencyAmount currencyAmount;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(ImmutableCorporateActionWillGetCashLeg beanToCopy) {
      this.payReceive = beanToCopy.getPayReceive();
      this.paymentDate = beanToCopy.getPaymentDate();
      this.currencyAmount = beanToCopy.getCurrencyAmount();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -885469925:  // payReceive
          return payReceive;
        case -1540873516:  // paymentDate
          return paymentDate;
        case -838788151:  // currencyAmount
          return currencyAmount;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -885469925:  // payReceive
          this.payReceive = (PayReceive) newValue;
          break;
        case -1540873516:  // paymentDate
          this.paymentDate = (LocalDate) newValue;
          break;
        case -838788151:  // currencyAmount
          this.currencyAmount = (CurrencyAmount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ImmutableCorporateActionWillGetCashLeg build() {
      return new ImmutableCorporateActionWillGetCashLeg(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the payReceive.
     * @param payReceive  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder payReceive(PayReceive payReceive) {
      JodaBeanUtils.notNull(payReceive, "payReceive");
      this.payReceive = payReceive;
      return this;
    }

    /**
     * Sets the paymentDate.
     * @param paymentDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentDate(LocalDate paymentDate) {
      JodaBeanUtils.notNull(paymentDate, "paymentDate");
      this.paymentDate = paymentDate;
      return this;
    }

    /**
     * Sets the currencyAmount.
     * @param currencyAmount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder currencyAmount(CurrencyAmount currencyAmount) {
      JodaBeanUtils.notNull(currencyAmount, "currencyAmount");
      this.currencyAmount = currencyAmount;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("ImmutableCorporateActionWillGetCashLeg.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("payReceive").append('=').append(JodaBeanUtils.toString(payReceive)).append(',').append(' ');
      buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate)).append(',').append(' ');
      buf.append("currencyAmount").append('=').append(JodaBeanUtils.toString(currencyAmount)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
