package com.opengamma.strata.product.corporateaction.cashdividend;

import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.product.SecuritizedProduct;
import com.opengamma.strata.product.SecurityId;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

@BeanDefinition
public class CashDividend implements SecuritizedProduct, ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull")
  private final SecurityId securityId;

  @PropertyDefinition(validate = "notNull")
  private final LocalDate exDate;

  @PropertyDefinition(validate = "notNull")
  private final LocalDate recordDate;

  @PropertyDefinition(validate = "notNull")
  private final LocalDate paymentDate;

  @PropertyDefinition(validate = "notNull")
  private final CurrencyAmount currencyAmountPerShare;

  @Override
  public Currency getCurrency() {
    return currencyAmountPerShare.getCurrency();
  }

  @Override public ImmutableSet<Currency> allCurrencies() {
    return ImmutableSet.of(currencyAmountPerShare.getCurrency());
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code CashDividend}.
   * @return the meta-bean, not null
   */
  public static CashDividend.Meta meta() {
    return CashDividend.Meta.INSTANCE;
  }

  static {
    MetaBean.register(CashDividend.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CashDividend.Builder builder() {
    return new CashDividend.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected CashDividend(CashDividend.Builder builder) {
    JodaBeanUtils.notNull(builder.securityId, "securityId");
    JodaBeanUtils.notNull(builder.exDate, "exDate");
    JodaBeanUtils.notNull(builder.recordDate, "recordDate");
    JodaBeanUtils.notNull(builder.paymentDate, "paymentDate");
    JodaBeanUtils.notNull(builder.currencyAmountPerShare, "currencyAmountPerShare");
    this.securityId = builder.securityId;
    this.exDate = builder.exDate;
    this.recordDate = builder.recordDate;
    this.paymentDate = builder.paymentDate;
    this.currencyAmountPerShare = builder.currencyAmountPerShare;
  }

  @Override
  public CashDividend.Meta metaBean() {
    return CashDividend.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the securityId.
   * @return the value of the property, not null
   */
  public SecurityId getSecurityId() {
    return securityId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exDate.
   * @return the value of the property, not null
   */
  public LocalDate getExDate() {
    return exDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the recordDate.
   * @return the value of the property, not null
   */
  public LocalDate getRecordDate() {
    return recordDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the paymentDate.
   * @return the value of the property, not null
   */
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currencyAmountPerShare.
   * @return the value of the property, not null
   */
  public CurrencyAmount getCurrencyAmountPerShare() {
    return currencyAmountPerShare;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CashDividend other = (CashDividend) obj;
      return JodaBeanUtils.equal(securityId, other.securityId) &&
          JodaBeanUtils.equal(exDate, other.exDate) &&
          JodaBeanUtils.equal(recordDate, other.recordDate) &&
          JodaBeanUtils.equal(paymentDate, other.paymentDate) &&
          JodaBeanUtils.equal(currencyAmountPerShare, other.currencyAmountPerShare);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(securityId);
    hash = hash * 31 + JodaBeanUtils.hashCode(exDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(recordDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(currencyAmountPerShare);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("CashDividend{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
    buf.append("exDate").append('=').append(JodaBeanUtils.toString(exDate)).append(',').append(' ');
    buf.append("recordDate").append('=').append(JodaBeanUtils.toString(recordDate)).append(',').append(' ');
    buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate)).append(',').append(' ');
    buf.append("currencyAmountPerShare").append('=').append(JodaBeanUtils.toString(currencyAmountPerShare)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CashDividend}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code securityId} property.
     */
    private final MetaProperty<SecurityId> securityId = DirectMetaProperty.ofImmutable(
        this, "securityId", CashDividend.class, SecurityId.class);
    /**
     * The meta-property for the {@code exDate} property.
     */
    private final MetaProperty<LocalDate> exDate = DirectMetaProperty.ofImmutable(
        this, "exDate", CashDividend.class, LocalDate.class);
    /**
     * The meta-property for the {@code recordDate} property.
     */
    private final MetaProperty<LocalDate> recordDate = DirectMetaProperty.ofImmutable(
        this, "recordDate", CashDividend.class, LocalDate.class);
    /**
     * The meta-property for the {@code paymentDate} property.
     */
    private final MetaProperty<LocalDate> paymentDate = DirectMetaProperty.ofImmutable(
        this, "paymentDate", CashDividend.class, LocalDate.class);
    /**
     * The meta-property for the {@code currencyAmountPerShare} property.
     */
    private final MetaProperty<CurrencyAmount> currencyAmountPerShare = DirectMetaProperty.ofImmutable(
        this, "currencyAmountPerShare", CashDividend.class, CurrencyAmount.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "securityId",
        "exDate",
        "recordDate",
        "paymentDate",
        "currencyAmountPerShare");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1290477823:  // exDate
          return exDate;
        case 734412703:  // recordDate
          return recordDate;
        case -1540873516:  // paymentDate
          return paymentDate;
        case -84967509:  // currencyAmountPerShare
          return currencyAmountPerShare;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CashDividend.Builder builder() {
      return new CashDividend.Builder();
    }

    @Override
    public Class<? extends CashDividend> beanType() {
      return CashDividend.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code securityId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SecurityId> securityId() {
      return securityId;
    }

    /**
     * The meta-property for the {@code exDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> exDate() {
      return exDate;
    }

    /**
     * The meta-property for the {@code recordDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> recordDate() {
      return recordDate;
    }

    /**
     * The meta-property for the {@code paymentDate} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate> paymentDate() {
      return paymentDate;
    }

    /**
     * The meta-property for the {@code currencyAmountPerShare} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CurrencyAmount> currencyAmountPerShare() {
      return currencyAmountPerShare;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return ((CashDividend) bean).getSecurityId();
        case -1290477823:  // exDate
          return ((CashDividend) bean).getExDate();
        case 734412703:  // recordDate
          return ((CashDividend) bean).getRecordDate();
        case -1540873516:  // paymentDate
          return ((CashDividend) bean).getPaymentDate();
        case -84967509:  // currencyAmountPerShare
          return ((CashDividend) bean).getCurrencyAmountPerShare();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CashDividend}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<CashDividend> {

    private SecurityId securityId;
    private LocalDate exDate;
    private LocalDate recordDate;
    private LocalDate paymentDate;
    private CurrencyAmount currencyAmountPerShare;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(CashDividend beanToCopy) {
      this.securityId = beanToCopy.getSecurityId();
      this.exDate = beanToCopy.getExDate();
      this.recordDate = beanToCopy.getRecordDate();
      this.paymentDate = beanToCopy.getPaymentDate();
      this.currencyAmountPerShare = beanToCopy.getCurrencyAmountPerShare();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1290477823:  // exDate
          return exDate;
        case 734412703:  // recordDate
          return recordDate;
        case -1540873516:  // paymentDate
          return paymentDate;
        case -84967509:  // currencyAmountPerShare
          return currencyAmountPerShare;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          this.securityId = (SecurityId) newValue;
          break;
        case -1290477823:  // exDate
          this.exDate = (LocalDate) newValue;
          break;
        case 734412703:  // recordDate
          this.recordDate = (LocalDate) newValue;
          break;
        case -1540873516:  // paymentDate
          this.paymentDate = (LocalDate) newValue;
          break;
        case -84967509:  // currencyAmountPerShare
          this.currencyAmountPerShare = (CurrencyAmount) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public CashDividend build() {
      return new CashDividend(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the securityId.
     * @param securityId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityId(SecurityId securityId) {
      JodaBeanUtils.notNull(securityId, "securityId");
      this.securityId = securityId;
      return this;
    }

    /**
     * Sets the exDate.
     * @param exDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder exDate(LocalDate exDate) {
      JodaBeanUtils.notNull(exDate, "exDate");
      this.exDate = exDate;
      return this;
    }

    /**
     * Sets the recordDate.
     * @param recordDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder recordDate(LocalDate recordDate) {
      JodaBeanUtils.notNull(recordDate, "recordDate");
      this.recordDate = recordDate;
      return this;
    }

    /**
     * Sets the paymentDate.
     * @param paymentDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentDate(LocalDate paymentDate) {
      JodaBeanUtils.notNull(paymentDate, "paymentDate");
      this.paymentDate = paymentDate;
      return this;
    }

    /**
     * Sets the currencyAmountPerShare.
     * @param currencyAmountPerShare  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder currencyAmountPerShare(CurrencyAmount currencyAmountPerShare) {
      JodaBeanUtils.notNull(currencyAmountPerShare, "currencyAmountPerShare");
      this.currencyAmountPerShare = currencyAmountPerShare;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("CashDividend.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
      buf.append("exDate").append('=').append(JodaBeanUtils.toString(exDate)).append(',').append(' ');
      buf.append("recordDate").append('=').append(JodaBeanUtils.toString(recordDate)).append(',').append(' ');
      buf.append("paymentDate").append('=').append(JodaBeanUtils.toString(paymentDate)).append(',').append(' ');
      buf.append("currencyAmountPerShare").append('=').append(JodaBeanUtils.toString(currencyAmountPerShare)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
