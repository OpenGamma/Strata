/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.corporateaction;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.product.SecurityId;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

/**
 * A market convention for Ibor-Ibor swap trades.
 * <p>
 * This defines the market convention for a Ibor-Ibor single currency swap.
 * The convention is formed by combining two swap leg conventions in the same currency.
 * <p>
 * The market price is for the difference (spread) between the values of the two legs.
 * This convention has two legs, the "spread leg" and the "flat leg". The spread will be
 * added to the "spread leg", which is typically the leg with the shorter underlying tenor.
 * The payment frequency is typically determined by the longer underlying tenor, with
 * compounding applied.
 * <p>
 * For example, a 'USD 3s1s' basis swap has 'USD-LIBOR-1M' as the spread leg and 'USD-LIBOR-3M'
 * as the flat leg. Payment is every 3 months, with the one month leg compounded.
 * <p>
 * The convention is defined by four key dates.
 * <ul>
 * <li>Trade date, the date that the trade is agreed
 * <li>Spot date, the base for date calculations, typically 2 business days after the trade date
 * <li>Start date, the date on which the interest calculation starts, often the same as the spot date
 * <li>End date, the date on which the interest calculation ends, typically a number of years after the start date
 * </ul>
 */
@BeanDefinition
public final class ImmutableSingleCashPaymentConvention
    implements SingleCashPaymentConvention, ImmutableBean, Serializable {

  /**
   * The convention name, such as 'USD-LIBOR-3M-LIBOR-6M'.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final String name;
  /**
   * The market convention of the floating leg that has the spread applied.
   * <p>
   * The spread is the market price of the instrument.
   * It is added to the observed interest rate.
   */
  @PropertyDefinition(validate = "notNull")
  public final SingleCashPaymentLegConvention singleCashPaymentLegConvention;



  //-------------------------------------------------------------------------
  /**
   * Obtains a convention based on the specified name and leg conventions.
   * <p>
   * The two leg conventions must be in the same currency.
   * The spot date offset is set to be the effective date offset of the index of the spread leg.
   *
   * @param name  the unique name of the convention
   * @param spreadLeg  the market convention for the leg that the spread is added to
   * @param flatLeg  the market convention for the other leg, known as the flat leg
   * @return the convention
   */
  public static ImmutableSingleCashPaymentConvention of(
      String name,
      SingleCashPaymentLegConvention singleCashPaymentLegConvention) {

    return new ImmutableSingleCashPaymentConvention(name, singleCashPaymentLegConvention);
  }

  @Override
  public AnnouncementCorporateAction toAnnouncementCorporateAction(CorporateActionInfo info,
      SecurityId neededSecurityId, double quantityNeeded,
      LocalDate paymentDate, CurrencyAmount payment) {

      CorporateActionLeg leg = singleCashPaymentLegConvention.toLeg(neededSecurityId, quantityNeeded, paymentDate, payment);

    return AnnouncementCorporateAction.builder()
        .corporateActionInfo(info)
        .corporateActionLegs(ImmutableList.of(leg))
        .build();
  }



  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ImmutableSingleCashPaymentConvention}.
   * @return the meta-bean, not null
   */
  public static ImmutableSingleCashPaymentConvention.Meta meta() {
    return ImmutableSingleCashPaymentConvention.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ImmutableSingleCashPaymentConvention.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ImmutableSingleCashPaymentConvention.Builder builder() {
    return new ImmutableSingleCashPaymentConvention.Builder();
  }

  private ImmutableSingleCashPaymentConvention(
      String name,
      SingleCashPaymentLegConvention singleCashPaymentLegConvention) {
    JodaBeanUtils.notNull(name, "name");
    JodaBeanUtils.notNull(singleCashPaymentLegConvention, "singleCashPaymentLegConvention");
    this.name = name;
    this.singleCashPaymentLegConvention = singleCashPaymentLegConvention;
  }

  @Override
  public ImmutableSingleCashPaymentConvention.Meta metaBean() {
    return ImmutableSingleCashPaymentConvention.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the convention name, such as 'USD-LIBOR-3M-LIBOR-6M'.
   * @return the value of the property, not null
   */
  @Override
  public String getName() {
    return name;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the market convention of the floating leg that has the spread applied.
   * <p>
   * The spread is the market price of the instrument.
   * It is added to the observed interest rate.
   * @return the value of the property, not null
   */
  public SingleCashPaymentLegConvention getSingleCashPaymentLegConvention() {
    return singleCashPaymentLegConvention;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableSingleCashPaymentConvention other = (ImmutableSingleCashPaymentConvention) obj;
      return JodaBeanUtils.equal(name, other.name) &&
          JodaBeanUtils.equal(singleCashPaymentLegConvention, other.singleCashPaymentLegConvention);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(name);
    hash = hash * 31 + JodaBeanUtils.hashCode(singleCashPaymentLegConvention);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ImmutableSingleCashPaymentConvention{");
    buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
    buf.append("singleCashPaymentLegConvention").append('=').append(JodaBeanUtils.toString(singleCashPaymentLegConvention));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableSingleCashPaymentConvention}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> name = DirectMetaProperty.ofImmutable(
        this, "name", ImmutableSingleCashPaymentConvention.class, String.class);
    /**
     * The meta-property for the {@code singleCashPaymentLegConvention} property.
     */
    private final MetaProperty<SingleCashPaymentLegConvention> singleCashPaymentLegConvention = DirectMetaProperty.ofImmutable(
        this, "singleCashPaymentLegConvention", ImmutableSingleCashPaymentConvention.class, SingleCashPaymentLegConvention.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "name",
        "singleCashPaymentLegConvention");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case -1978892300:  // singleCashPaymentLegConvention
          return singleCashPaymentLegConvention;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ImmutableSingleCashPaymentConvention.Builder builder() {
      return new ImmutableSingleCashPaymentConvention.Builder();
    }

    @Override
    public Class<? extends ImmutableSingleCashPaymentConvention> beanType() {
      return ImmutableSingleCashPaymentConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> name() {
      return name;
    }

    /**
     * The meta-property for the {@code singleCashPaymentLegConvention} property.
     * @return the meta-property, not null
     */
    public MetaProperty<SingleCashPaymentLegConvention> singleCashPaymentLegConvention() {
      return singleCashPaymentLegConvention;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return ((ImmutableSingleCashPaymentConvention) bean).getName();
        case -1978892300:  // singleCashPaymentLegConvention
          return ((ImmutableSingleCashPaymentConvention) bean).getSingleCashPaymentLegConvention();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableSingleCashPaymentConvention}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ImmutableSingleCashPaymentConvention> {

    private String name;
    private SingleCashPaymentLegConvention singleCashPaymentLegConvention;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ImmutableSingleCashPaymentConvention beanToCopy) {
      this.name = beanToCopy.getName();
      this.singleCashPaymentLegConvention = beanToCopy.getSingleCashPaymentLegConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          return name;
        case -1978892300:  // singleCashPaymentLegConvention
          return singleCashPaymentLegConvention;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3373707:  // name
          this.name = (String) newValue;
          break;
        case -1978892300:  // singleCashPaymentLegConvention
          this.singleCashPaymentLegConvention = (SingleCashPaymentLegConvention) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ImmutableSingleCashPaymentConvention build() {
      return new ImmutableSingleCashPaymentConvention(
          name,
          singleCashPaymentLegConvention);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the convention name, such as 'USD-LIBOR-3M-LIBOR-6M'.
     * @param name  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder name(String name) {
      JodaBeanUtils.notNull(name, "name");
      this.name = name;
      return this;
    }

    /**
     * Sets the market convention of the floating leg that has the spread applied.
     * <p>
     * The spread is the market price of the instrument.
     * It is added to the observed interest rate.
     * @param singleCashPaymentLegConvention  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder singleCashPaymentLegConvention(SingleCashPaymentLegConvention singleCashPaymentLegConvention) {
      JodaBeanUtils.notNull(singleCashPaymentLegConvention, "singleCashPaymentLegConvention");
      this.singleCashPaymentLegConvention = singleCashPaymentLegConvention;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ImmutableSingleCashPaymentConvention.Builder{");
      buf.append("name").append('=').append(JodaBeanUtils.toString(name)).append(',').append(' ');
      buf.append("singleCashPaymentLegConvention").append('=').append(JodaBeanUtils.toString(singleCashPaymentLegConvention));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
