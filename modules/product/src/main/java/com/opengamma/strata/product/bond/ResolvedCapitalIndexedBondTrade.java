/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.bond;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.market.ReferenceData;
import com.opengamma.strata.collect.id.StandardId;
import com.opengamma.strata.product.ResolvedTrade;
import com.opengamma.strata.product.TradeInfo;
import com.opengamma.strata.product.swap.PaymentPeriod;

/** 
 * A trade in a capital indexed bond, resolved for pricing.
 * <p>
 * This is the resolved form of {@link CapitalIndexedBondTrade} and is the primary input to the pricers.
 * Applications will typically create a {@code ResolvedCapitalIndexedBondTrade} from a {@code CapitalIndexedBondTrade}
 * using {@link CapitalIndexedBondTrade#resolve(ReferenceData)}.
 * <p>
 * A {@code ResolvedCapitalIndexedBondTrade} is bound to data that changes over time, such as holiday calendars.
 * If the data changes, such as the addition of a new holiday, the resolved form will not be updated.
 * Care must be taken when placing the resolved form in a cache or persistence layer.
 */
@BeanDefinition
public final class ResolvedCapitalIndexedBondTrade
    implements ResolvedTrade, ImmutableBean, Serializable {

  /**
   * The additional trade information, defaulted to an empty instance.
   * <p>
   * This allows additional information to be attached to the trade.
   */
  @PropertyDefinition(overrideGet = true)
  private final TradeInfo tradeInfo;
  /**
   * The resolved fixed coupon bond product.
   * <p>
   * The product captures the contracted financial details of the trade.
   */
  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final ResolvedCapitalIndexedBond product;
  /**
   * The identifier used to refer to the security.
   */
  @PropertyDefinition(validate = "notNull")
  private final StandardId securityStandardId;
  /**
   * The quantity, indicating the number of bond contracts in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   */
  @PropertyDefinition
  private final long quantity;
  /**
   * The settlement of the bond trade.
   * <p>
   * The payment sign should be compatible with the product notional and trade quantity, 
   * thus the payment is negative for positive quantity and positive for negative quantity.
   * <p>
   * This is effectively a fixed amount payment once the inflation rate is fixed.
   */
  @PropertyDefinition(validate = "notNull")
  private final PaymentPeriod settlement;

  //-------------------------------------------------------------------------
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.tradeInfo = TradeInfo.EMPTY;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ResolvedCapitalIndexedBondTrade}.
   * @return the meta-bean, not null
   */
  public static ResolvedCapitalIndexedBondTrade.Meta meta() {
    return ResolvedCapitalIndexedBondTrade.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ResolvedCapitalIndexedBondTrade.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ResolvedCapitalIndexedBondTrade.Builder builder() {
    return new ResolvedCapitalIndexedBondTrade.Builder();
  }

  private ResolvedCapitalIndexedBondTrade(
      TradeInfo tradeInfo,
      ResolvedCapitalIndexedBond product,
      StandardId securityStandardId,
      long quantity,
      PaymentPeriod settlement) {
    JodaBeanUtils.notNull(product, "product");
    JodaBeanUtils.notNull(securityStandardId, "securityStandardId");
    JodaBeanUtils.notNull(settlement, "settlement");
    this.tradeInfo = tradeInfo;
    this.product = product;
    this.securityStandardId = securityStandardId;
    this.quantity = quantity;
    this.settlement = settlement;
  }

  @Override
  public ResolvedCapitalIndexedBondTrade.Meta metaBean() {
    return ResolvedCapitalIndexedBondTrade.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the additional trade information, defaulted to an empty instance.
   * <p>
   * This allows additional information to be attached to the trade.
   * @return the value of the property
   */
  @Override
  public TradeInfo getTradeInfo() {
    return tradeInfo;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the resolved fixed coupon bond product.
   * <p>
   * The product captures the contracted financial details of the trade.
   * @return the value of the property, not null
   */
  @Override
  public ResolvedCapitalIndexedBond getProduct() {
    return product;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier used to refer to the security.
   * @return the value of the property, not null
   */
  public StandardId getSecurityStandardId() {
    return securityStandardId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the quantity, indicating the number of bond contracts in the trade.
   * <p>
   * This will be positive if buying and negative if selling.
   * @return the value of the property
   */
  public long getQuantity() {
    return quantity;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the settlement of the bond trade.
   * <p>
   * The payment sign should be compatible with the product notional and trade quantity,
   * thus the payment is negative for positive quantity and positive for negative quantity.
   * <p>
   * This is effectively a fixed amount payment once the inflation rate is fixed.
   * @return the value of the property, not null
   */
  public PaymentPeriod getSettlement() {
    return settlement;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ResolvedCapitalIndexedBondTrade other = (ResolvedCapitalIndexedBondTrade) obj;
      return JodaBeanUtils.equal(tradeInfo, other.tradeInfo) &&
          JodaBeanUtils.equal(product, other.product) &&
          JodaBeanUtils.equal(securityStandardId, other.securityStandardId) &&
          (quantity == other.quantity) &&
          JodaBeanUtils.equal(settlement, other.settlement);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(tradeInfo);
    hash = hash * 31 + JodaBeanUtils.hashCode(product);
    hash = hash * 31 + JodaBeanUtils.hashCode(securityStandardId);
    hash = hash * 31 + JodaBeanUtils.hashCode(quantity);
    hash = hash * 31 + JodaBeanUtils.hashCode(settlement);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("ResolvedCapitalIndexedBondTrade{");
    buf.append("tradeInfo").append('=').append(tradeInfo).append(',').append(' ');
    buf.append("product").append('=').append(product).append(',').append(' ');
    buf.append("securityStandardId").append('=').append(securityStandardId).append(',').append(' ');
    buf.append("quantity").append('=').append(quantity).append(',').append(' ');
    buf.append("settlement").append('=').append(JodaBeanUtils.toString(settlement));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ResolvedCapitalIndexedBondTrade}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code tradeInfo} property.
     */
    private final MetaProperty<TradeInfo> tradeInfo = DirectMetaProperty.ofImmutable(
        this, "tradeInfo", ResolvedCapitalIndexedBondTrade.class, TradeInfo.class);
    /**
     * The meta-property for the {@code product} property.
     */
    private final MetaProperty<ResolvedCapitalIndexedBond> product = DirectMetaProperty.ofImmutable(
        this, "product", ResolvedCapitalIndexedBondTrade.class, ResolvedCapitalIndexedBond.class);
    /**
     * The meta-property for the {@code securityStandardId} property.
     */
    private final MetaProperty<StandardId> securityStandardId = DirectMetaProperty.ofImmutable(
        this, "securityStandardId", ResolvedCapitalIndexedBondTrade.class, StandardId.class);
    /**
     * The meta-property for the {@code quantity} property.
     */
    private final MetaProperty<Long> quantity = DirectMetaProperty.ofImmutable(
        this, "quantity", ResolvedCapitalIndexedBondTrade.class, Long.TYPE);
    /**
     * The meta-property for the {@code settlement} property.
     */
    private final MetaProperty<PaymentPeriod> settlement = DirectMetaProperty.ofImmutable(
        this, "settlement", ResolvedCapitalIndexedBondTrade.class, PaymentPeriod.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "tradeInfo",
        "product",
        "securityStandardId",
        "quantity",
        "settlement");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return tradeInfo;
        case -309474065:  // product
          return product;
        case -593973224:  // securityStandardId
          return securityStandardId;
        case -1285004149:  // quantity
          return quantity;
        case 73828649:  // settlement
          return settlement;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ResolvedCapitalIndexedBondTrade.Builder builder() {
      return new ResolvedCapitalIndexedBondTrade.Builder();
    }

    @Override
    public Class<? extends ResolvedCapitalIndexedBondTrade> beanType() {
      return ResolvedCapitalIndexedBondTrade.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code tradeInfo} property.
     * @return the meta-property, not null
     */
    public MetaProperty<TradeInfo> tradeInfo() {
      return tradeInfo;
    }

    /**
     * The meta-property for the {@code product} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ResolvedCapitalIndexedBond> product() {
      return product;
    }

    /**
     * The meta-property for the {@code securityStandardId} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> securityStandardId() {
      return securityStandardId;
    }

    /**
     * The meta-property for the {@code quantity} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Long> quantity() {
      return quantity;
    }

    /**
     * The meta-property for the {@code settlement} property.
     * @return the meta-property, not null
     */
    public MetaProperty<PaymentPeriod> settlement() {
      return settlement;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return ((ResolvedCapitalIndexedBondTrade) bean).getTradeInfo();
        case -309474065:  // product
          return ((ResolvedCapitalIndexedBondTrade) bean).getProduct();
        case -593973224:  // securityStandardId
          return ((ResolvedCapitalIndexedBondTrade) bean).getSecurityStandardId();
        case -1285004149:  // quantity
          return ((ResolvedCapitalIndexedBondTrade) bean).getQuantity();
        case 73828649:  // settlement
          return ((ResolvedCapitalIndexedBondTrade) bean).getSettlement();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ResolvedCapitalIndexedBondTrade}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<ResolvedCapitalIndexedBondTrade> {

    private TradeInfo tradeInfo;
    private ResolvedCapitalIndexedBond product;
    private StandardId securityStandardId;
    private long quantity;
    private PaymentPeriod settlement;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(ResolvedCapitalIndexedBondTrade beanToCopy) {
      this.tradeInfo = beanToCopy.getTradeInfo();
      this.product = beanToCopy.getProduct();
      this.securityStandardId = beanToCopy.getSecurityStandardId();
      this.quantity = beanToCopy.getQuantity();
      this.settlement = beanToCopy.getSettlement();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          return tradeInfo;
        case -309474065:  // product
          return product;
        case -593973224:  // securityStandardId
          return securityStandardId;
        case -1285004149:  // quantity
          return quantity;
        case 73828649:  // settlement
          return settlement;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 752580658:  // tradeInfo
          this.tradeInfo = (TradeInfo) newValue;
          break;
        case -309474065:  // product
          this.product = (ResolvedCapitalIndexedBond) newValue;
          break;
        case -593973224:  // securityStandardId
          this.securityStandardId = (StandardId) newValue;
          break;
        case -1285004149:  // quantity
          this.quantity = (Long) newValue;
          break;
        case 73828649:  // settlement
          this.settlement = (PaymentPeriod) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ResolvedCapitalIndexedBondTrade build() {
      return new ResolvedCapitalIndexedBondTrade(
          tradeInfo,
          product,
          securityStandardId,
          quantity,
          settlement);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the additional trade information, defaulted to an empty instance.
     * <p>
     * This allows additional information to be attached to the trade.
     * @param tradeInfo  the new value
     * @return this, for chaining, not null
     */
    public Builder tradeInfo(TradeInfo tradeInfo) {
      this.tradeInfo = tradeInfo;
      return this;
    }

    /**
     * Sets the resolved fixed coupon bond product.
     * <p>
     * The product captures the contracted financial details of the trade.
     * @param product  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder product(ResolvedCapitalIndexedBond product) {
      JodaBeanUtils.notNull(product, "product");
      this.product = product;
      return this;
    }

    /**
     * Sets the identifier used to refer to the security.
     * @param securityStandardId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityStandardId(StandardId securityStandardId) {
      JodaBeanUtils.notNull(securityStandardId, "securityStandardId");
      this.securityStandardId = securityStandardId;
      return this;
    }

    /**
     * Sets the quantity, indicating the number of bond contracts in the trade.
     * <p>
     * This will be positive if buying and negative if selling.
     * @param quantity  the new value
     * @return this, for chaining, not null
     */
    public Builder quantity(long quantity) {
      this.quantity = quantity;
      return this;
    }

    /**
     * Sets the settlement of the bond trade.
     * <p>
     * The payment sign should be compatible with the product notional and trade quantity,
     * thus the payment is negative for positive quantity and positive for negative quantity.
     * <p>
     * This is effectively a fixed amount payment once the inflation rate is fixed.
     * @param settlement  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder settlement(PaymentPeriod settlement) {
      JodaBeanUtils.notNull(settlement, "settlement");
      this.settlement = settlement;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(192);
      buf.append("ResolvedCapitalIndexedBondTrade.Builder{");
      buf.append("tradeInfo").append('=').append(JodaBeanUtils.toString(tradeInfo)).append(',').append(' ');
      buf.append("product").append('=').append(JodaBeanUtils.toString(product)).append(',').append(' ');
      buf.append("securityStandardId").append('=').append(JodaBeanUtils.toString(securityStandardId)).append(',').append(' ');
      buf.append("quantity").append('=').append(JodaBeanUtils.toString(quantity)).append(',').append(' ');
      buf.append("settlement").append('=').append(JodaBeanUtils.toString(settlement));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
