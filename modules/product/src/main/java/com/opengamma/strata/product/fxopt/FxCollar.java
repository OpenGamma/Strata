/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.fxopt;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

import com.opengamma.strata.basics.ReferenceData;
import com.opengamma.strata.basics.Resolvable;
import com.opengamma.strata.basics.currency.CurrencyPair;
import com.opengamma.strata.collect.ArgChecker;
import com.opengamma.strata.product.fx.FxProduct;

/**
 * An FX collar consisting of two transactions.
 * <p>
 * The transactions must be passed in with value dates in the correct order.
 * The currency pair of each leg must match and have amounts flowing in opposite directions.
 */
@BeanDefinition(factoryName = "of", builderScope = "private")
public final class FxCollar implements FxProduct, Resolvable<ResolvedFxCollar>, ImmutableBean,
    Serializable {

  /**
   * The foreign exchange transaction.
   * <p>
   */
  @PropertyDefinition(validate = "notNull")
  private final FxVanillaOption option1;

  /**
   * The foreign exchange transaction.
   * <p>
   */
  @PropertyDefinition(validate = "notNull")
  private final FxVanillaOption option2;

  /**
   * The transactions must be passed in with value dates in the correct order.
   * The currency pair of each leg must match and have amounts flowing in opposite directions.
   */
  @ImmutableValidator
  private void validate() {
    if (!option1.getCurrencyPair().equals(option2.getCurrencyPair())) {
      throw new IllegalArgumentException("Options must have the same currency pair");
    }
    if (option1.getLongShort() == option2.getLongShort()) {
      throw new IllegalArgumentException("Legs must have payments flowing in opposite directions");
    }
  }

  @Override
  public CurrencyPair getCurrencyPair() {
    return option1.getCurrencyPair();
  }

  @Override
  public ResolvedFxCollar resolve(ReferenceData refData) {
    return ResolvedFxCollar.of(option1.resolve(refData), option2.resolve(refData));
  }
  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code FxCollar}.
   * @return the meta-bean, not null
   */
  public static FxCollar.Meta meta() {
    return FxCollar.Meta.INSTANCE;
  }

  static {
    MetaBean.register(FxCollar.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Obtains an instance.
   * @param option1  the value of the property, not null
   * @param option2  the value of the property, not null
   * @return the instance
   */
  public static FxCollar of(
      FxVanillaOption option1,
      FxVanillaOption option2) {
    return new FxCollar(
      option1,
      option2);
  }

  private FxCollar(
      FxVanillaOption option1,
      FxVanillaOption option2) {
    JodaBeanUtils.notNull(option1, "option1");
    JodaBeanUtils.notNull(option2, "option2");
    this.option1 = option1;
    this.option2 = option2;
    validate();
  }

  @Override
  public FxCollar.Meta metaBean() {
    return FxCollar.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the foreign exchange transaction.
   * <p>
   * @return the value of the property, not null
   */
  public FxVanillaOption getOption1() {
    return option1;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the foreign exchange transaction.
   * <p>
   * @return the value of the property, not null
   */
  public FxVanillaOption getOption2() {
    return option2;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxCollar other = (FxCollar) obj;
      return JodaBeanUtils.equal(option1, other.option1) &&
          JodaBeanUtils.equal(option2, other.option2);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(option1);
    hash = hash * 31 + JodaBeanUtils.hashCode(option2);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("FxCollar{");
    buf.append("option1").append('=').append(JodaBeanUtils.toString(option1)).append(',').append(' ');
    buf.append("option2").append('=').append(JodaBeanUtils.toString(option2));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxCollar}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code option1} property.
     */
    private final MetaProperty<FxVanillaOption> option1 = DirectMetaProperty.ofImmutable(
        this, "option1", FxCollar.class, FxVanillaOption.class);
    /**
     * The meta-property for the {@code option2} property.
     */
    private final MetaProperty<FxVanillaOption> option2 = DirectMetaProperty.ofImmutable(
        this, "option2", FxCollar.class, FxVanillaOption.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "option1",
        "option2");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1249474980:  // option1
          return option1;
        case -1249474979:  // option2
          return option2;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FxCollar> builder() {
      return new FxCollar.Builder();
    }

    @Override
    public Class<? extends FxCollar> beanType() {
      return FxCollar.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code option1} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxVanillaOption> option1() {
      return option1;
    }

    /**
     * The meta-property for the {@code option2} property.
     * @return the meta-property, not null
     */
    public MetaProperty<FxVanillaOption> option2() {
      return option2;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1249474980:  // option1
          return ((FxCollar) bean).getOption1();
        case -1249474979:  // option2
          return ((FxCollar) bean).getOption2();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxCollar}.
   */
  private static final class Builder extends DirectPrivateBeanBuilder<FxCollar> {

    private FxVanillaOption option1;
    private FxVanillaOption option2;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1249474980:  // option1
          return option1;
        case -1249474979:  // option2
          return option2;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1249474980:  // option1
          this.option1 = (FxVanillaOption) newValue;
          break;
        case -1249474979:  // option2
          this.option2 = (FxVanillaOption) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public FxCollar build() {
      return new FxCollar(
          option1,
          option2);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("FxCollar.Builder{");
      buf.append("option1").append('=').append(JodaBeanUtils.toString(option1)).append(',').append(' ');
      buf.append("option2").append('=').append(JodaBeanUtils.toString(option2));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
