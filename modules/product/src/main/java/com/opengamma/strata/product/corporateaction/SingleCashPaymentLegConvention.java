/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.product.corporateaction;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.basics.currency.Money;
import com.opengamma.strata.product.SecurityId;
import com.opengamma.strata.product.common.PayReceive;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableDefaults;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

/**
 * A market convention for the fixed leg of rate swap trades.
 * <p>
 * This defines the market convention for a fixed leg in a specific currency.
 * <p>
 * Some fields are mandatory, others are optional, providing the ability to override
 * The getters will default any missing information on the fly, avoiding both null and {@link Optional}.
 */
@BeanDefinition
public final class SingleCashPaymentLegConvention
    implements CorporateActionEventLegConvention, ImmutableBean, Serializable {



  //-------------------------------------------------------------------------
  /**
   * Obtains a convention based on the specified parameters.
   * <p>
   * The standard market convention for a fixed rate leg is based on these parameters,
   * with the stub convention set to 'SmartInitial'.
   * Use the {@linkplain #builder() builder} for unusual conventions.
   *
   * @param currency  the currency of the leg
   * @param dayCount  the day count
   * @param accrualFrequency  the accrual frequency
   * @param accrualBusinessDayAdjustment  the accrual business day adjustment
   * @return the convention
   */
  public static SingleCashPaymentLegConvention of() {

    return SingleCashPaymentLegConvention
        .builder()
        .build();


  }


  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {

  }

  //-------------------------------------------------------------------------

  public CorporateActionLeg toLeg(
      SecurityId neededSecurityId,
      double quantityNeeded,
      LocalDate paymentDate,
      CurrencyAmount payment) { //DPDPDP Debit Credit

    return ImmutableCorporateActionLeg
        .builder()
        .corporateActionMustHaveLeg(ImmutableCorporateActionMustHaveLeg.builder()
            .quantityNeeded(quantityNeeded)
            .securityId(neededSecurityId)
            .defaultOption(DefaultOption.YES)
            .option(CorporateActionOptions.CASH)
            .build())
        .corporateActionWillGetLegs(ImmutableList.of(ImmutableCorporateActionWillGetCashLeg.builder()
            .payReceive(PayReceive.RECEIVE)
            .paymentDate(paymentDate)
            .currencyAmount(payment)
            .build()))
        .build();
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code SingleCashPaymentLegConvention}.
   * @return the meta-bean, not null
   */
  public static SingleCashPaymentLegConvention.Meta meta() {
    return SingleCashPaymentLegConvention.Meta.INSTANCE;
  }

  static {
    MetaBean.register(SingleCashPaymentLegConvention.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static SingleCashPaymentLegConvention.Builder builder() {
    return new SingleCashPaymentLegConvention.Builder();
  }

  private SingleCashPaymentLegConvention() {
  }

  @Override
  public SingleCashPaymentLegConvention.Meta metaBean() {
    return SingleCashPaymentLegConvention.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(32);
    buf.append("SingleCashPaymentLegConvention{");
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SingleCashPaymentLegConvention}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null);

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    public SingleCashPaymentLegConvention.Builder builder() {
      return new SingleCashPaymentLegConvention.Builder();
    }

    @Override
    public Class<? extends SingleCashPaymentLegConvention> beanType() {
      return SingleCashPaymentLegConvention.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SingleCashPaymentLegConvention}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<SingleCashPaymentLegConvention> {

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      throw new NoSuchElementException("Unknown property: " + propertyName);
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public SingleCashPaymentLegConvention build() {
      return new SingleCashPaymentLegConvention();
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      return "SingleCashPaymentLegConvention.Builder{}";
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
