package com.opengamma.strata.product.corporateaction;

import com.opengamma.strata.basics.currency.CurrencyAmount;
import com.opengamma.strata.product.SecurityId;
import com.opengamma.strata.product.common.PayReceive;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

@BeanDefinition
public class ImmutableCorporateActionMustHaveLeg
    implements CorporateActionMustHaveLeg, ImmutableBean, Serializable  {

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final SecurityId securityId;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final double quantityNeeded;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final CorporateActionOption option;

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final DefaultOption defaultOption;


  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionMustHaveLeg}.
   * @return the meta-bean, not null
   */
  public static ImmutableCorporateActionMustHaveLeg.Meta meta() {
    return ImmutableCorporateActionMustHaveLeg.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ImmutableCorporateActionMustHaveLeg.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ImmutableCorporateActionMustHaveLeg.Builder builder() {
    return new ImmutableCorporateActionMustHaveLeg.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected ImmutableCorporateActionMustHaveLeg(ImmutableCorporateActionMustHaveLeg.Builder builder) {
    JodaBeanUtils.notNull(builder.securityId, "securityId");
    JodaBeanUtils.notNull(builder.quantityNeeded, "quantityNeeded");
    JodaBeanUtils.notNull(builder.option, "option");
    JodaBeanUtils.notNull(builder.defaultOption, "defaultOption");
    this.securityId = builder.securityId;
    this.quantityNeeded = builder.quantityNeeded;
    this.option = builder.option;
    this.defaultOption = builder.defaultOption;
  }

  @Override
  public ImmutableCorporateActionMustHaveLeg.Meta metaBean() {
    return ImmutableCorporateActionMustHaveLeg.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the securityId.
   * @return the value of the property, not null
   */
  @Override
  public SecurityId getSecurityId() {
    return securityId;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the quantityNeeded.
   * @return the value of the property, not null
   */
  @Override
  public double getQuantityNeeded() {
    return quantityNeeded;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the option.
   * @return the value of the property, not null
   */
  @Override
  public CorporateActionOption getOption() {
    return option;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the defaultOption.
   * @return the value of the property, not null
   */
  @Override
  public DefaultOption getDefaultOption() {
    return defaultOption;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableCorporateActionMustHaveLeg other = (ImmutableCorporateActionMustHaveLeg) obj;
      return JodaBeanUtils.equal(securityId, other.securityId) &&
          JodaBeanUtils.equal(quantityNeeded, other.quantityNeeded) &&
          JodaBeanUtils.equal(option, other.option) &&
          JodaBeanUtils.equal(defaultOption, other.defaultOption);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(securityId);
    hash = hash * 31 + JodaBeanUtils.hashCode(quantityNeeded);
    hash = hash * 31 + JodaBeanUtils.hashCode(option);
    hash = hash * 31 + JodaBeanUtils.hashCode(defaultOption);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("ImmutableCorporateActionMustHaveLeg{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
    buf.append("quantityNeeded").append('=').append(JodaBeanUtils.toString(quantityNeeded)).append(',').append(' ');
    buf.append("option").append('=').append(JodaBeanUtils.toString(option)).append(',').append(' ');
    buf.append("defaultOption").append('=').append(JodaBeanUtils.toString(defaultOption)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionMustHaveLeg}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code securityId} property.
     */
    private final MetaProperty<SecurityId> securityId = DirectMetaProperty.ofImmutable(
        this, "securityId", ImmutableCorporateActionMustHaveLeg.class, SecurityId.class);
    /**
     * The meta-property for the {@code quantityNeeded} property.
     */
    private final MetaProperty<Double> quantityNeeded = DirectMetaProperty.ofImmutable(
        this, "quantityNeeded", ImmutableCorporateActionMustHaveLeg.class, Double.TYPE);
    /**
     * The meta-property for the {@code option} property.
     */
    private final MetaProperty<CorporateActionOption> option = DirectMetaProperty.ofImmutable(
        this, "option", ImmutableCorporateActionMustHaveLeg.class, CorporateActionOption.class);
    /**
     * The meta-property for the {@code defaultOption} property.
     */
    private final MetaProperty<DefaultOption> defaultOption = DirectMetaProperty.ofImmutable(
        this, "defaultOption", ImmutableCorporateActionMustHaveLeg.class, DefaultOption.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "securityId",
        "quantityNeeded",
        "option",
        "defaultOption");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1201126368:  // quantityNeeded
          return quantityNeeded;
        case -1010136971:  // option
          return option;
        case 855627286:  // defaultOption
          return defaultOption;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ImmutableCorporateActionMustHaveLeg.Builder builder() {
      return new ImmutableCorporateActionMustHaveLeg.Builder();
    }

    @Override
    public Class<? extends ImmutableCorporateActionMustHaveLeg> beanType() {
      return ImmutableCorporateActionMustHaveLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code securityId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SecurityId> securityId() {
      return securityId;
    }

    /**
     * The meta-property for the {@code quantityNeeded} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> quantityNeeded() {
      return quantityNeeded;
    }

    /**
     * The meta-property for the {@code option} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CorporateActionOption> option() {
      return option;
    }

    /**
     * The meta-property for the {@code defaultOption} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<DefaultOption> defaultOption() {
      return defaultOption;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return ((ImmutableCorporateActionMustHaveLeg) bean).getSecurityId();
        case -1201126368:  // quantityNeeded
          return ((ImmutableCorporateActionMustHaveLeg) bean).getQuantityNeeded();
        case -1010136971:  // option
          return ((ImmutableCorporateActionMustHaveLeg) bean).getOption();
        case 855627286:  // defaultOption
          return ((ImmutableCorporateActionMustHaveLeg) bean).getDefaultOption();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableCorporateActionMustHaveLeg}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<ImmutableCorporateActionMustHaveLeg> {

    private SecurityId securityId;
    private double quantityNeeded;
    private CorporateActionOption option;
    private DefaultOption defaultOption;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(ImmutableCorporateActionMustHaveLeg beanToCopy) {
      this.securityId = beanToCopy.getSecurityId();
      this.quantityNeeded = beanToCopy.getQuantityNeeded();
      this.option = beanToCopy.getOption();
      this.defaultOption = beanToCopy.getDefaultOption();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          return securityId;
        case -1201126368:  // quantityNeeded
          return quantityNeeded;
        case -1010136971:  // option
          return option;
        case 855627286:  // defaultOption
          return defaultOption;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1574023291:  // securityId
          this.securityId = (SecurityId) newValue;
          break;
        case -1201126368:  // quantityNeeded
          this.quantityNeeded = (Double) newValue;
          break;
        case -1010136971:  // option
          this.option = (CorporateActionOption) newValue;
          break;
        case 855627286:  // defaultOption
          this.defaultOption = (DefaultOption) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ImmutableCorporateActionMustHaveLeg build() {
      return new ImmutableCorporateActionMustHaveLeg(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the securityId.
     * @param securityId  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder securityId(SecurityId securityId) {
      JodaBeanUtils.notNull(securityId, "securityId");
      this.securityId = securityId;
      return this;
    }

    /**
     * Sets the quantityNeeded.
     * @param quantityNeeded  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder quantityNeeded(double quantityNeeded) {
      JodaBeanUtils.notNull(quantityNeeded, "quantityNeeded");
      this.quantityNeeded = quantityNeeded;
      return this;
    }

    /**
     * Sets the option.
     * @param option  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder option(CorporateActionOption option) {
      JodaBeanUtils.notNull(option, "option");
      this.option = option;
      return this;
    }

    /**
     * Sets the defaultOption.
     * @param defaultOption  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder defaultOption(DefaultOption defaultOption) {
      JodaBeanUtils.notNull(defaultOption, "defaultOption");
      this.defaultOption = defaultOption;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("ImmutableCorporateActionMustHaveLeg.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("securityId").append('=').append(JodaBeanUtils.toString(securityId)).append(',').append(' ');
      buf.append("quantityNeeded").append('=').append(JodaBeanUtils.toString(quantityNeeded)).append(',').append(' ');
      buf.append("option").append('=').append(JodaBeanUtils.toString(option)).append(',').append(' ');
      buf.append("defaultOption").append('=').append(JodaBeanUtils.toString(defaultOption)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
