package com.opengamma.strata.product.corporateaction;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.product.CorporateAction;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;

@BeanDefinition
public final class AnnouncementCorporateAction
    implements CorporateAction, ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final CorporateActionInfo corporateActionInfo;

  @PropertyDefinition(validate = "notEmpty", builderType = "List<? extends CorporateActionLeg>", overrideGet = true)
  private final ImmutableList<CorporateActionLeg> corporateActionLegs;

  @Override public Currency getCurrency() {
    return Currency.XXX; //DPDPDP
  }


 /* public static ImmutableCorporateAction of(String reference, CorporateActionEventType eventType, List<? extends CorporateActionLeg> legs) {
    ArgChecker.notNull(reference, "reference");
    ArgChecker.notNull(eventType, "eventType");
    ArgChecker.notEmpty(legs, "legs");

    CorporateActionInfo info = CorporateActionInfo.builder()
        .id(StandardId.of("OG-Test", reference))
        .eventType(eventType)
        .build();

    return new ImmutableCorporateAction(info, legs);
  }*/

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code AnnouncementCorporateAction}.
   * @return the meta-bean, not null
   */
  public static AnnouncementCorporateAction.Meta meta() {
    return AnnouncementCorporateAction.Meta.INSTANCE;
  }

  static {
    MetaBean.register(AnnouncementCorporateAction.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static AnnouncementCorporateAction.Builder builder() {
    return new AnnouncementCorporateAction.Builder();
  }

  private AnnouncementCorporateAction(
      CorporateActionInfo corporateActionInfo,
      List<? extends CorporateActionLeg> corporateActionLegs) {
    JodaBeanUtils.notNull(corporateActionInfo, "corporateActionInfo");
    JodaBeanUtils.notEmpty(corporateActionLegs, "corporateActionLegs");
    this.corporateActionInfo = corporateActionInfo;
    this.corporateActionLegs = ImmutableList.copyOf(corporateActionLegs);
  }

  @Override
  public AnnouncementCorporateAction.Meta metaBean() {
    return AnnouncementCorporateAction.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the corporateActionInfo.
   * @return the value of the property, not null
   */
  @Override
  public CorporateActionInfo getCorporateActionInfo() {
    return corporateActionInfo;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the corporateActionLegs.
   * @return the value of the property, not empty
   */
  @Override
  public ImmutableList<CorporateActionLeg> getCorporateActionLegs() {
    return corporateActionLegs;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      AnnouncementCorporateAction other = (AnnouncementCorporateAction) obj;
      return JodaBeanUtils.equal(corporateActionInfo, other.corporateActionInfo) &&
          JodaBeanUtils.equal(corporateActionLegs, other.corporateActionLegs);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(corporateActionInfo);
    hash = hash * 31 + JodaBeanUtils.hashCode(corporateActionLegs);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("AnnouncementCorporateAction{");
    buf.append("corporateActionInfo").append('=').append(JodaBeanUtils.toString(corporateActionInfo)).append(',').append(' ');
    buf.append("corporateActionLegs").append('=').append(JodaBeanUtils.toString(corporateActionLegs));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code AnnouncementCorporateAction}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code corporateActionInfo} property.
     */
    private final MetaProperty<CorporateActionInfo> corporateActionInfo = DirectMetaProperty.ofImmutable(
        this, "corporateActionInfo", AnnouncementCorporateAction.class, CorporateActionInfo.class);
    /**
     * The meta-property for the {@code corporateActionLegs} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<CorporateActionLeg>> corporateActionLegs = DirectMetaProperty.ofImmutable(
        this, "corporateActionLegs", AnnouncementCorporateAction.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "corporateActionInfo",
        "corporateActionLegs");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1779349065:  // corporateActionInfo
          return corporateActionInfo;
        case 1779429824:  // corporateActionLegs
          return corporateActionLegs;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public AnnouncementCorporateAction.Builder builder() {
      return new AnnouncementCorporateAction.Builder();
    }

    @Override
    public Class<? extends AnnouncementCorporateAction> beanType() {
      return AnnouncementCorporateAction.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code corporateActionInfo} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CorporateActionInfo> corporateActionInfo() {
      return corporateActionInfo;
    }

    /**
     * The meta-property for the {@code corporateActionLegs} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableList<CorporateActionLeg>> corporateActionLegs() {
      return corporateActionLegs;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1779349065:  // corporateActionInfo
          return ((AnnouncementCorporateAction) bean).getCorporateActionInfo();
        case 1779429824:  // corporateActionLegs
          return ((AnnouncementCorporateAction) bean).getCorporateActionLegs();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code AnnouncementCorporateAction}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<AnnouncementCorporateAction> {

    private CorporateActionInfo corporateActionInfo;
    private List<? extends CorporateActionLeg> corporateActionLegs = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(AnnouncementCorporateAction beanToCopy) {
      this.corporateActionInfo = beanToCopy.getCorporateActionInfo();
      this.corporateActionLegs = beanToCopy.getCorporateActionLegs();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1779349065:  // corporateActionInfo
          return corporateActionInfo;
        case 1779429824:  // corporateActionLegs
          return corporateActionLegs;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 1779349065:  // corporateActionInfo
          this.corporateActionInfo = (CorporateActionInfo) newValue;
          break;
        case 1779429824:  // corporateActionLegs
          this.corporateActionLegs = (List<? extends CorporateActionLeg>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public AnnouncementCorporateAction build() {
      return new AnnouncementCorporateAction(
          corporateActionInfo,
          corporateActionLegs);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the corporateActionInfo.
     * @param corporateActionInfo  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder corporateActionInfo(CorporateActionInfo corporateActionInfo) {
      JodaBeanUtils.notNull(corporateActionInfo, "corporateActionInfo");
      this.corporateActionInfo = corporateActionInfo;
      return this;
    }

    /**
     * Sets the corporateActionLegs.
     * @param corporateActionLegs  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder corporateActionLegs(List<? extends CorporateActionLeg> corporateActionLegs) {
      JodaBeanUtils.notEmpty(corporateActionLegs, "corporateActionLegs");
      this.corporateActionLegs = corporateActionLegs;
      return this;
    }

    /**
     * Sets the {@code corporateActionLegs} property in the builder
     * from an array of objects.
     * @param corporateActionLegs  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder corporateActionLegs(CorporateActionLeg... corporateActionLegs) {
      return corporateActionLegs(ImmutableList.copyOf(corporateActionLegs));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("AnnouncementCorporateAction.Builder{");
      buf.append("corporateActionInfo").append('=').append(JodaBeanUtils.toString(corporateActionInfo)).append(',').append(' ');
      buf.append("corporateActionLegs").append('=').append(JodaBeanUtils.toString(corporateActionLegs));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
