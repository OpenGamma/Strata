package com.opengamma.strata.product.corporateaction;

import com.google.common.collect.ImmutableList;
import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

@BeanDefinition
public class ImmutableCorporateActionLeg implements CorporateActionLeg, ImmutableBean, Serializable {

  @PropertyDefinition(validate = "notNull", overrideGet = true)
  private final CorporateActionMustHaveLeg corporateActionMustHaveLeg;

  @PropertyDefinition(validate = "notEmpty", builderType = "List<? extends CorporateActionWillGetLeg>", overrideGet = true)
  private final ImmutableList<CorporateActionWillGetLeg> corporateActionWillGetLegs;

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionLeg}.
   * @return the meta-bean, not null
   */
  public static ImmutableCorporateActionLeg.Meta meta() {
    return ImmutableCorporateActionLeg.Meta.INSTANCE;
  }

  static {
    MetaBean.register(ImmutableCorporateActionLeg.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static ImmutableCorporateActionLeg.Builder builder() {
    return new ImmutableCorporateActionLeg.Builder();
  }

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected ImmutableCorporateActionLeg(ImmutableCorporateActionLeg.Builder builder) {
    JodaBeanUtils.notNull(builder.corporateActionMustHaveLeg, "corporateActionMustHaveLeg");
    JodaBeanUtils.notEmpty(builder.corporateActionWillGetLegs, "corporateActionWillGetLegs");
    this.corporateActionMustHaveLeg = builder.corporateActionMustHaveLeg;
    this.corporateActionWillGetLegs = ImmutableList.copyOf(builder.corporateActionWillGetLegs);
  }

  @Override
  public ImmutableCorporateActionLeg.Meta metaBean() {
    return ImmutableCorporateActionLeg.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the corporateActionMustHaveLeg.
   * @return the value of the property, not null
   */
  @Override
  public CorporateActionMustHaveLeg getCorporateActionMustHaveLeg() {
    return corporateActionMustHaveLeg;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the corporateActionWillGetLegs.
   * @return the value of the property, not empty
   */
  @Override
  public ImmutableList<CorporateActionWillGetLeg> getCorporateActionWillGetLegs() {
    return corporateActionWillGetLegs;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ImmutableCorporateActionLeg other = (ImmutableCorporateActionLeg) obj;
      return JodaBeanUtils.equal(corporateActionMustHaveLeg, other.corporateActionMustHaveLeg) &&
          JodaBeanUtils.equal(corporateActionWillGetLegs, other.corporateActionWillGetLegs);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(corporateActionMustHaveLeg);
    hash = hash * 31 + JodaBeanUtils.hashCode(corporateActionWillGetLegs);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ImmutableCorporateActionLeg{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("corporateActionMustHaveLeg").append('=').append(JodaBeanUtils.toString(corporateActionMustHaveLeg)).append(',').append(' ');
    buf.append("corporateActionWillGetLegs").append('=').append(JodaBeanUtils.toString(corporateActionWillGetLegs)).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ImmutableCorporateActionLeg}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code corporateActionMustHaveLeg} property.
     */
    private final MetaProperty<CorporateActionMustHaveLeg> corporateActionMustHaveLeg = DirectMetaProperty.ofImmutable(
        this, "corporateActionMustHaveLeg", ImmutableCorporateActionLeg.class, CorporateActionMustHaveLeg.class);
    /**
     * The meta-property for the {@code corporateActionWillGetLegs} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableList<CorporateActionWillGetLeg>> corporateActionWillGetLegs = DirectMetaProperty.ofImmutable(
        this, "corporateActionWillGetLegs", ImmutableCorporateActionLeg.class, (Class) ImmutableList.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "corporateActionMustHaveLeg",
        "corporateActionWillGetLegs");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1665703102:  // corporateActionMustHaveLeg
          return corporateActionMustHaveLeg;
        case 2131925614:  // corporateActionWillGetLegs
          return corporateActionWillGetLegs;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public ImmutableCorporateActionLeg.Builder builder() {
      return new ImmutableCorporateActionLeg.Builder();
    }

    @Override
    public Class<? extends ImmutableCorporateActionLeg> beanType() {
      return ImmutableCorporateActionLeg.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code corporateActionMustHaveLeg} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CorporateActionMustHaveLeg> corporateActionMustHaveLeg() {
      return corporateActionMustHaveLeg;
    }

    /**
     * The meta-property for the {@code corporateActionWillGetLegs} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ImmutableList<CorporateActionWillGetLeg>> corporateActionWillGetLegs() {
      return corporateActionWillGetLegs;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1665703102:  // corporateActionMustHaveLeg
          return ((ImmutableCorporateActionLeg) bean).getCorporateActionMustHaveLeg();
        case 2131925614:  // corporateActionWillGetLegs
          return ((ImmutableCorporateActionLeg) bean).getCorporateActionWillGetLegs();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ImmutableCorporateActionLeg}.
   */
  public static class Builder extends DirectFieldsBeanBuilder<ImmutableCorporateActionLeg> {

    private CorporateActionMustHaveLeg corporateActionMustHaveLeg;
    private List<? extends CorporateActionWillGetLeg> corporateActionWillGetLegs = ImmutableList.of();

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    protected Builder(ImmutableCorporateActionLeg beanToCopy) {
      this.corporateActionMustHaveLeg = beanToCopy.getCorporateActionMustHaveLeg();
      this.corporateActionWillGetLegs = beanToCopy.getCorporateActionWillGetLegs();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1665703102:  // corporateActionMustHaveLeg
          return corporateActionMustHaveLeg;
        case 2131925614:  // corporateActionWillGetLegs
          return corporateActionWillGetLegs;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1665703102:  // corporateActionMustHaveLeg
          this.corporateActionMustHaveLeg = (CorporateActionMustHaveLeg) newValue;
          break;
        case 2131925614:  // corporateActionWillGetLegs
          this.corporateActionWillGetLegs = (List<? extends CorporateActionWillGetLeg>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public ImmutableCorporateActionLeg build() {
      return new ImmutableCorporateActionLeg(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the corporateActionMustHaveLeg.
     * @param corporateActionMustHaveLeg  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder corporateActionMustHaveLeg(CorporateActionMustHaveLeg corporateActionMustHaveLeg) {
      JodaBeanUtils.notNull(corporateActionMustHaveLeg, "corporateActionMustHaveLeg");
      this.corporateActionMustHaveLeg = corporateActionMustHaveLeg;
      return this;
    }

    /**
     * Sets the corporateActionWillGetLegs.
     * @param corporateActionWillGetLegs  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder corporateActionWillGetLegs(List<? extends CorporateActionWillGetLeg> corporateActionWillGetLegs) {
      JodaBeanUtils.notEmpty(corporateActionWillGetLegs, "corporateActionWillGetLegs");
      this.corporateActionWillGetLegs = corporateActionWillGetLegs;
      return this;
    }

    /**
     * Sets the {@code corporateActionWillGetLegs} property in the builder
     * from an array of objects.
     * @param corporateActionWillGetLegs  the new value, not empty
     * @return this, for chaining, not null
     */
    public Builder corporateActionWillGetLegs(CorporateActionWillGetLeg... corporateActionWillGetLegs) {
      return corporateActionWillGetLegs(ImmutableList.copyOf(corporateActionWillGetLegs));
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ImmutableCorporateActionLeg.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("corporateActionMustHaveLeg").append('=').append(JodaBeanUtils.toString(corporateActionMustHaveLeg)).append(',').append(' ');
      buf.append("corporateActionWillGetLegs").append('=').append(JodaBeanUtils.toString(corporateActionWillGetLegs)).append(',').append(' ');
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
