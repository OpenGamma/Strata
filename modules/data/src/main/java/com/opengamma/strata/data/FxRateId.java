/*
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.data;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableConstructor;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.currency.CurrencyPair;
import com.opengamma.strata.basics.currency.FxRate;
import com.opengamma.strata.collect.ArgChecker;

/**
 * Identifies the market data for an FX rate.
 * <p>
 * The currency pair in a rate ID is always the market convention currency pair. If an ID is
 * created using a non-conventional pair, the pair is inverted. This has no effect on the
 * {@link FxRate} identified by the ID as it can handle both currency pairs that can be
 * created from the two currencies.
 */
@BeanDefinition(builderScope = "private", cacheHashCode = true)
public final class FxRateId
    implements MarketDataId<FxRate>, ImmutableBean, Serializable {

  /**
   * The currency pair that is required.
   * For example, 'GBP/USD'.
   */
  @PropertyDefinition(validate = "notNull")
  private final CurrencyPair pair;
  /**
   * The source of observable market data.
   * This is used when looking up the underlying market quotes for the rate.
   */
  @PropertyDefinition(validate = "notNull")
  private final ObservableSource observableSource;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance representing the FX rate for a currency pair.
   *
   * @param currencyPair  a currency pair
   * @return an ID for the FX rate for the currency pair
   */
  public static FxRateId of(CurrencyPair currencyPair) {
    return new FxRateId(currencyPair, ObservableSource.NONE);
  }

  /**
   * Obtains an instance representing the FX rate for a currency pair.
   *
   * @param base  the base currency of the pair
   * @param counter  the counter currency of the pair
   * @return an ID for the FX rate for the currency pair
   */
  public static FxRateId of(Currency base, Currency counter) {
    return new FxRateId(CurrencyPair.of(base, counter), ObservableSource.NONE);
  }

  /**
   * Obtains an instance representing the FX rate for a currency pair, specifying the source.
   *
   * @param currencyPair  a currency pair
   * @param observableSource  the source of the observable market data used to create the rate
   * @return an ID for the FX rate for the currency pair
   */
  public static FxRateId of(CurrencyPair currencyPair, ObservableSource observableSource) {
    return new FxRateId(currencyPair, observableSource);
  }

  /**
   * Obtains an instance representing the FX rate for a currency pair, specifying the source.
   *
   * @param base  the base currency of the pair
   * @param counter  the counter currency of the pair
   * @param observableSource  the source of the observable market data used to create the rate
   * @return an ID for the FX rate for the currency pair
   */
  public static FxRateId of(Currency base, Currency counter, ObservableSource observableSource) {
    return new FxRateId(CurrencyPair.of(base, counter), observableSource);
  }

  @ImmutableConstructor
  private FxRateId(CurrencyPair currencyPair, ObservableSource observableSource) {
    ArgChecker.notNull(currencyPair, "currencyPair");
    ArgChecker.notNull(observableSource, "observableSource");
    this.pair = currencyPair.toConventional();
    this.observableSource = observableSource;
  }

  //-------------------------------------------------------------------------
  @Override
  public Class<FxRate> getMarketDataType() {
    return FxRate.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code FxRateId}.
   * @return the meta-bean, not null
   */
  public static FxRateId.Meta meta() {
    return FxRateId.Meta.INSTANCE;
  }

  static {
    MetaBean.register(FxRateId.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * The cached hash code, using the racy single-check idiom.
   */
  private transient int cacheHashCode;

  @Override
  public FxRateId.Meta metaBean() {
    return FxRateId.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency pair that is required.
   * For example, 'GBP/USD'.
   * @return the value of the property, not null
   */
  public CurrencyPair getPair() {
    return pair;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the source of observable market data.
   * This is used when looking up the underlying market quotes for the rate.
   * @return the value of the property, not null
   */
  public ObservableSource getObservableSource() {
    return observableSource;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FxRateId other = (FxRateId) obj;
      return JodaBeanUtils.equal(pair, other.pair) &&
          JodaBeanUtils.equal(observableSource, other.observableSource);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = cacheHashCode;
    if (hash == 0) {
      hash = getClass().hashCode();
      hash = hash * 31 + JodaBeanUtils.hashCode(pair);
      hash = hash * 31 + JodaBeanUtils.hashCode(observableSource);
      cacheHashCode = hash;
    }
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("FxRateId{");
    buf.append("pair").append('=').append(pair).append(',').append(' ');
    buf.append("observableSource").append('=').append(JodaBeanUtils.toString(observableSource));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FxRateId}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code pair} property.
     */
    private final MetaProperty<CurrencyPair> pair = DirectMetaProperty.ofImmutable(
        this, "pair", FxRateId.class, CurrencyPair.class);
    /**
     * The meta-property for the {@code observableSource} property.
     */
    private final MetaProperty<ObservableSource> observableSource = DirectMetaProperty.ofImmutable(
        this, "observableSource", FxRateId.class, ObservableSource.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "pair",
        "observableSource");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3433178:  // pair
          return pair;
        case 1793526590:  // observableSource
          return observableSource;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FxRateId> builder() {
      return new FxRateId.Builder();
    }

    @Override
    public Class<? extends FxRateId> beanType() {
      return FxRateId.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code pair} property.
     * @return the meta-property, not null
     */
    public MetaProperty<CurrencyPair> pair() {
      return pair;
    }

    /**
     * The meta-property for the {@code observableSource} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ObservableSource> observableSource() {
      return observableSource;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3433178:  // pair
          return ((FxRateId) bean).getPair();
        case 1793526590:  // observableSource
          return ((FxRateId) bean).getObservableSource();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FxRateId}.
   */
  private static final class Builder extends DirectPrivateBeanBuilder<FxRateId> {

    private CurrencyPair pair;
    private ObservableSource observableSource;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3433178:  // pair
          return pair;
        case 1793526590:  // observableSource
          return observableSource;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3433178:  // pair
          this.pair = (CurrencyPair) newValue;
          break;
        case 1793526590:  // observableSource
          this.observableSource = (ObservableSource) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public FxRateId build() {
      return new FxRateId(
          pair,
          observableSource);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("FxRateId.Builder{");
      buf.append("pair").append('=').append(JodaBeanUtils.toString(pair)).append(',').append(' ');
      buf.append("observableSource").append('=').append(JodaBeanUtils.toString(observableSource));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
