/**
 * Copyright (C) 2016 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.function.calculation.swaption;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.opengamma.strata.basics.index.IborIndex;
import com.opengamma.strata.basics.index.Index;
import com.opengamma.strata.basics.market.MarketData;
import com.opengamma.strata.basics.market.MarketDataKey;
import com.opengamma.strata.calc.CalculationRules;
import com.opengamma.strata.calc.marketdata.CalculationEnvironment;
import com.opengamma.strata.calc.marketdata.FunctionRequirements;
import com.opengamma.strata.calc.runner.CalculationParameter;
import com.opengamma.strata.collect.Messages;
import com.opengamma.strata.market.id.SwaptionVolatilitiesId;
import com.opengamma.strata.market.view.SwaptionVolatilities;

/**
 * The swaption lookup, used to select volatilities for pricing.
 * <p>
 * This provides swaption volatilities by index.
 * <p>
 * The lookup implements {@link CalculationParameter} and is used by passing it
 * as an argument to {@link CalculationRules}. It provides the link between the
 * data that the function needs and the data that is available in {@link CalculationEnvironment}.
 */
@BeanDefinition(builderScope = "private")
final class DefaultSwaptionMarketLookup
    implements SwaptionMarketLookup, ImmutableBean, Serializable {

  /**
   * The volatility identifiers, keyed by index.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<IborIndex, SwaptionVolatilitiesId> volatilityIds;

  //-------------------------------------------------------------------------
  /**
   * Obtains an instance based on a single mapping from index to volatility identifier.
   * <p>
   * The lookup provides volatilities for the specified index.
   *
   * @param index  the Ibor index
   * @param volatilityId  the volatility identifier
   * @return the swaption lookup containing the specified mapping
   */
  public static DefaultSwaptionMarketLookup of(IborIndex index, SwaptionVolatilitiesId volatilityId) {
    return new DefaultSwaptionMarketLookup(ImmutableMap.of(index, volatilityId));
  }

  /**
   * Obtains an instance based on a map of volatility identifiers.
   * <p>
   * The map is used to specify the appropriate volatilities to use for each index.
   *
   * @param volatilityIds  the volatility identifiers, keyed by index
   * @return the swaption lookup containing the specified volatilities
   */
  public static DefaultSwaptionMarketLookup of(Map<IborIndex, SwaptionVolatilitiesId> volatilityIds) {
    return new DefaultSwaptionMarketLookup(volatilityIds);
  }

  //-------------------------------------------------------------------------
  @Override
  public ImmutableSet<IborIndex> getVolatilityIndices() {
    return volatilityIds.keySet();
  }

  @Override
  public ImmutableSet<MarketDataKey<?>> getVolatilityIds(IborIndex index) {
    SwaptionVolatilitiesId id = volatilityIds.get(index);
    if (id == null) {
      throw new IllegalArgumentException(msgIndexNotFound(index));
    }
    return ImmutableSet.of(id);
  }

  //-------------------------------------------------------------------------
  @Override
  public FunctionRequirements requirements(Set<IborIndex> indices) {
    for (Index index : indices) {
      if (!volatilityIds.keySet().contains(index)) {
        throw new IllegalArgumentException(msgIndexNotFound(index));
      }
    }
    return FunctionRequirements.builder()
        .singleValueRequirements(ImmutableSet.copyOf(volatilityIds.values()))
        .build();
  }

  //-------------------------------------------------------------------------
  @Override
  public SwaptionVolatilities volatilities(IborIndex index, MarketData marketData) {
    SwaptionVolatilitiesId volatilityId = volatilityIds.get(index);
    if (volatilityId == null) {
      throw new IllegalArgumentException(msgIndexNotFound(index));
    }
    return marketData.getValue(volatilityId);
  }

  //-------------------------------------------------------------------------
  private String msgIndexNotFound(Index index) {
    return Messages.format("Swaption lookup has no volatilities defined for index '{}'", index);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code DefaultSwaptionMarketLookup}.
   * @return the meta-bean, not null
   */
  public static DefaultSwaptionMarketLookup.Meta meta() {
    return DefaultSwaptionMarketLookup.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(DefaultSwaptionMarketLookup.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  private DefaultSwaptionMarketLookup(
      Map<IborIndex, SwaptionVolatilitiesId> volatilityIds) {
    JodaBeanUtils.notNull(volatilityIds, "volatilityIds");
    this.volatilityIds = ImmutableMap.copyOf(volatilityIds);
  }

  @Override
  public DefaultSwaptionMarketLookup.Meta metaBean() {
    return DefaultSwaptionMarketLookup.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the volatility identifiers, keyed by index.
   * @return the value of the property, not null
   */
  public ImmutableMap<IborIndex, SwaptionVolatilitiesId> getVolatilityIds() {
    return volatilityIds;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      DefaultSwaptionMarketLookup other = (DefaultSwaptionMarketLookup) obj;
      return JodaBeanUtils.equal(volatilityIds, other.volatilityIds);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(volatilityIds);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("DefaultSwaptionMarketLookup{");
    buf.append("volatilityIds").append('=').append(JodaBeanUtils.toString(volatilityIds));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code DefaultSwaptionMarketLookup}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code volatilityIds} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<IborIndex, SwaptionVolatilitiesId>> volatilityIds = DirectMetaProperty.ofImmutable(
        this, "volatilityIds", DefaultSwaptionMarketLookup.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "volatilityIds");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2080459859:  // volatilityIds
          return volatilityIds;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends DefaultSwaptionMarketLookup> builder() {
      return new DefaultSwaptionMarketLookup.Builder();
    }

    @Override
    public Class<? extends DefaultSwaptionMarketLookup> beanType() {
      return DefaultSwaptionMarketLookup.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code volatilityIds} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<IborIndex, SwaptionVolatilitiesId>> volatilityIds() {
      return volatilityIds;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 2080459859:  // volatilityIds
          return ((DefaultSwaptionMarketLookup) bean).getVolatilityIds();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code DefaultSwaptionMarketLookup}.
   */
  private static final class Builder extends DirectFieldsBeanBuilder<DefaultSwaptionMarketLookup> {

    private Map<IborIndex, SwaptionVolatilitiesId> volatilityIds = ImmutableMap.of();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 2080459859:  // volatilityIds
          return volatilityIds;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 2080459859:  // volatilityIds
          this.volatilityIds = (Map<IborIndex, SwaptionVolatilitiesId>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public DefaultSwaptionMarketLookup build() {
      return new DefaultSwaptionMarketLookup(
          volatilityIds);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("DefaultSwaptionMarketLookup.Builder{");
      buf.append("volatilityIds").append('=').append(JodaBeanUtils.toString(volatilityIds));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
