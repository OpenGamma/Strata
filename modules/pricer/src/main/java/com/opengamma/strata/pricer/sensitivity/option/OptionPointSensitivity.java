/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.sensitivity.option;

import java.io.Serializable;
import java.util.Set;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;

import com.opengamma.strata.basics.currency.Currency;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * A single sensitivity to a Ibor future normal volatility.
 */
@BeanDefinition(builderScope = "private")
public class OptionPointSensitivity 
    implements ImmutableBean, Serializable {
  
  /** The sensitivity key. */
  @PropertyDefinition(validate = "notNull")
  private final OptionSensitivityKey key;
  /** The currency in which the sensitivity is expressed. */
  @PropertyDefinition(validate = "notNull")
  private final Currency currency;
  /** The value of the sensitivity. */
  @PropertyDefinition
  private final double value;
  
  /**
   * Constructor.
   * @param key  the sensitivity key
   * @param value  the sensitivity value
   * @param currency  the currency in which the sensitivity is expressed
   */
  public OptionPointSensitivity(OptionSensitivityKey key, double value, Currency currency) {
    this.key = key;
    this.value = value;
    this.currency = currency;
  }

  /**
   * Returns an instance with the new point sensitivity value.
   * 
   * @param sensitivity  the new sensitivity
   * @return an instance based on this sensitivity with the specified sensitivity
   */
  public OptionPointSensitivity withSensitivity(double sensitivity) {
    return new OptionPointSensitivity(key, sensitivity, currency);
  }
  
  //-------------------------------------------------------------------------
  /**
   * Checks if this sensitivity equals another within the specified tolerance.
   * <p>
   * This returns true if the two instances have the same {@code OptionSensitivityKey} and {@code Currency}
   * where the sensitivity {@code double} values are compared within the specified tolerance.
   * 
   * @param other  the other sensitivity
   * @param tolerance  the tolerance
   * @return true if equal up to the tolerance
   */
  public boolean equalWithTolerance(OptionPointSensitivity other, double tolerance) {
    if(!this.key.equals(other.key)) {
      return false;
    }if(!this.currency.equals(other.currency)) {
      return false;
    }
    return (Math.abs(this.value - other.value) < tolerance);
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code OptionPointSensitivity}.
   * @return the meta-bean, not null
   */
  public static OptionPointSensitivity.Meta meta() {
    return OptionPointSensitivity.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(OptionPointSensitivity.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * Restricted constructor.
   * @param builder  the builder to copy from, not null
   */
  protected OptionPointSensitivity(OptionPointSensitivity.Builder builder) {
    JodaBeanUtils.notNull(builder.key, "key");
    JodaBeanUtils.notNull(builder.currency, "currency");
    this.key = builder.key;
    this.currency = builder.currency;
    this.value = builder.value;
  }

  @Override
  public OptionPointSensitivity.Meta metaBean() {
    return OptionPointSensitivity.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the sensitivity key.
   * @return the value of the property, not null
   */
  public OptionSensitivityKey getKey() {
    return key;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency in which the sensitivity is expressed.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return currency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the value of the sensitivity.
   * @return the value of the property
   */
  public double getValue() {
    return value;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      OptionPointSensitivity other = (OptionPointSensitivity) obj;
      return JodaBeanUtils.equal(getKey(), other.getKey()) &&
          JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getValue(), other.getValue());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(getKey());
    hash = hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash = hash * 31 + JodaBeanUtils.hashCode(getValue());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("OptionPointSensitivity{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("key").append('=').append(JodaBeanUtils.toString(getKey())).append(',').append(' ');
    buf.append("currency").append('=').append(JodaBeanUtils.toString(getCurrency())).append(',').append(' ');
    buf.append("value").append('=').append(JodaBeanUtils.toString(getValue())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code OptionPointSensitivity}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code key} property.
     */
    private final MetaProperty<OptionSensitivityKey> key = DirectMetaProperty.ofImmutable(
        this, "key", OptionPointSensitivity.class, OptionSensitivityKey.class);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> currency = DirectMetaProperty.ofImmutable(
        this, "currency", OptionPointSensitivity.class, Currency.class);
    /**
     * The meta-property for the {@code value} property.
     */
    private final MetaProperty<Double> value = DirectMetaProperty.ofImmutable(
        this, "value", OptionPointSensitivity.class, Double.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "key",
        "currency",
        "value");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return key;
        case 575402001:  // currency
          return currency;
        case 111972721:  // value
          return value;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends OptionPointSensitivity> builder() {
      return new OptionPointSensitivity.Builder();
    }

    @Override
    public Class<? extends OptionPointSensitivity> beanType() {
      return OptionPointSensitivity.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code key} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<OptionSensitivityKey> key() {
      return key;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return currency;
    }

    /**
     * The meta-property for the {@code value} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Double> value() {
      return value;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return ((OptionPointSensitivity) bean).getKey();
        case 575402001:  // currency
          return ((OptionPointSensitivity) bean).getCurrency();
        case 111972721:  // value
          return ((OptionPointSensitivity) bean).getValue();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code OptionPointSensitivity}.
   */
  private static class Builder extends DirectFieldsBeanBuilder<OptionPointSensitivity> {

    private OptionSensitivityKey key;
    private Currency currency;
    private double value;

    /**
     * Restricted constructor.
     */
    protected Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          return key;
        case 575402001:  // currency
          return currency;
        case 111972721:  // value
          return value;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 106079:  // key
          this.key = (OptionSensitivityKey) newValue;
          break;
        case 575402001:  // currency
          this.currency = (Currency) newValue;
          break;
        case 111972721:  // value
          this.value = (Double) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public OptionPointSensitivity build() {
      return new OptionPointSensitivity(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(128);
      buf.append("OptionPointSensitivity.Builder{");
      int len = buf.length();
      toString(buf);
      if (buf.length() > len) {
        buf.setLength(buf.length() - 2);
      }
      buf.append('}');
      return buf.toString();
    }

    protected void toString(StringBuilder buf) {
      buf.append("key").append('=').append(JodaBeanUtils.toString(key)).append(',').append(' ');
      buf.append("currency").append('=').append(JodaBeanUtils.toString(currency)).append(',').append(' ');
      buf.append("value").append('=').append(JodaBeanUtils.toString(value)).append(',').append(' ');
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
