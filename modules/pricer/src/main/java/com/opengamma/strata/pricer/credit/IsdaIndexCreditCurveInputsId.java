/**
 * Copyright (C) 2015 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.credit;

import java.io.Serializable;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

import com.opengamma.strata.data.MarketDataId;
import com.opengamma.strata.product.credit.IndexReferenceInformation;

/**
 * Market data ID for a set of par rates to be used in the ISDA credit model's credit curve
 * calibration for an index.
 */
@BeanDefinition(builderScope = "private", cacheHashCode = true)
public final class IsdaIndexCreditCurveInputsId
    implements MarketDataId<IsdaCreditCurveInputs>, ImmutableBean, Serializable {

  /**
   * The information that identifies the index.
   */
  @PropertyDefinition(validate = "notNull")
  private final IndexReferenceInformation referenceInformation;

  //-------------------------------------------------------------------------
  /**
   * Creates an instance based on the reference information.
   * 
   * @param referenceInformation  the information that identifies the index
   * @return the identifier
   */
  public static IsdaIndexCreditCurveInputsId of(IndexReferenceInformation referenceInformation) {
    return new IsdaIndexCreditCurveInputsId(referenceInformation);
  }

  //-------------------------------------------------------------------------
  @Override
  public Class<IsdaCreditCurveInputs> getMarketDataType() {
    return IsdaCreditCurveInputs.class;
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code IsdaIndexCreditCurveInputsId}.
   * @return the meta-bean, not null
   */
  public static IsdaIndexCreditCurveInputsId.Meta meta() {
    return IsdaIndexCreditCurveInputsId.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(IsdaIndexCreditCurveInputsId.Meta.INSTANCE);
  }

  /**
   * The serialization version id.
   */
  private static final long serialVersionUID = 1L;

  /**
   * The cached hash code, using the racy single-check idiom.
   */
  private int cachedHashCode;

  private IsdaIndexCreditCurveInputsId(
      IndexReferenceInformation referenceInformation) {
    JodaBeanUtils.notNull(referenceInformation, "referenceInformation");
    this.referenceInformation = referenceInformation;
  }

  @Override
  public IsdaIndexCreditCurveInputsId.Meta metaBean() {
    return IsdaIndexCreditCurveInputsId.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the information that identifies the index.
   * @return the value of the property, not null
   */
  public IndexReferenceInformation getReferenceInformation() {
    return referenceInformation;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      IsdaIndexCreditCurveInputsId other = (IsdaIndexCreditCurveInputsId) obj;
      return JodaBeanUtils.equal(referenceInformation, other.referenceInformation);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = cachedHashCode;
    if (hash == 0) {
      hash = getClass().hashCode();
      hash = hash * 31 + JodaBeanUtils.hashCode(referenceInformation);
      cachedHashCode = hash;
    }
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("IsdaIndexCreditCurveInputsId{");
    buf.append("referenceInformation").append('=').append(JodaBeanUtils.toString(referenceInformation));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code IsdaIndexCreditCurveInputsId}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code referenceInformation} property.
     */
    private final MetaProperty<IndexReferenceInformation> referenceInformation = DirectMetaProperty.ofImmutable(
        this, "referenceInformation", IsdaIndexCreditCurveInputsId.class, IndexReferenceInformation.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "referenceInformation");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2117930783:  // referenceInformation
          return referenceInformation;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends IsdaIndexCreditCurveInputsId> builder() {
      return new IsdaIndexCreditCurveInputsId.Builder();
    }

    @Override
    public Class<? extends IsdaIndexCreditCurveInputsId> beanType() {
      return IsdaIndexCreditCurveInputsId.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code referenceInformation} property.
     * @return the meta-property, not null
     */
    public MetaProperty<IndexReferenceInformation> referenceInformation() {
      return referenceInformation;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -2117930783:  // referenceInformation
          return ((IsdaIndexCreditCurveInputsId) bean).getReferenceInformation();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code IsdaIndexCreditCurveInputsId}.
   */
  private static final class Builder extends DirectPrivateBeanBuilder<IsdaIndexCreditCurveInputsId> {

    private IndexReferenceInformation referenceInformation;

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(meta());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -2117930783:  // referenceInformation
          return referenceInformation;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -2117930783:  // referenceInformation
          this.referenceInformation = (IndexReferenceInformation) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public IsdaIndexCreditCurveInputsId build() {
      return new IsdaIndexCreditCurveInputsId(
          referenceInformation);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("IsdaIndexCreditCurveInputsId.Builder{");
      buf.append("referenceInformation").append('=').append(JodaBeanUtils.toString(referenceInformation));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
