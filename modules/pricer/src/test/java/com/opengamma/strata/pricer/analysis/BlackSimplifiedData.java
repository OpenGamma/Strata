/*
 * Copyright (C) 2023 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.strata.pricer.analysis;

import java.util.Map;
import java.util.NoSuchElementException;

import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.impl.direct.DirectMetaProperty;

@BeanDefinition()
public final class BlackSimplifiedData
implements ImmutableBean {
  
  @PropertyDefinition
  private final double strike;
  
  @PropertyDefinition
  private final double timeToExpiry;
  
  @PropertyDefinition
  private final double impliedVolatility;
  
  @PropertyDefinition
  private final boolean isCall;

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code BlackSimplifiedData}.
   * @return the meta-bean, not null
   */
  public static BlackSimplifiedData.Meta meta() {
    return BlackSimplifiedData.Meta.INSTANCE;
  }

  static {
    MetaBean.register(BlackSimplifiedData.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static BlackSimplifiedData.Builder builder() {
    return new BlackSimplifiedData.Builder();
  }

  private BlackSimplifiedData(
      double strike,
      double timeToExpiry,
      double impliedVolatility,
      boolean isCall) {
    this.strike = strike;
    this.timeToExpiry = timeToExpiry;
    this.impliedVolatility = impliedVolatility;
    this.isCall = isCall;
  }

  @Override
  public BlackSimplifiedData.Meta metaBean() {
    return BlackSimplifiedData.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the strike.
   * @return the value of the property
   */
  public double getStrike() {
    return strike;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the timeToExpiry.
   * @return the value of the property
   */
  public double getTimeToExpiry() {
    return timeToExpiry;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the impliedVolatility.
   * @return the value of the property
   */
  public double getImpliedVolatility() {
    return impliedVolatility;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the isCall.
   * @return the value of the property
   */
  public boolean isIsCall() {
    return isCall;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      BlackSimplifiedData other = (BlackSimplifiedData) obj;
      return JodaBeanUtils.equal(strike, other.strike) &&
          JodaBeanUtils.equal(timeToExpiry, other.timeToExpiry) &&
          JodaBeanUtils.equal(impliedVolatility, other.impliedVolatility) &&
          (isCall == other.isCall);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(strike);
    hash = hash * 31 + JodaBeanUtils.hashCode(timeToExpiry);
    hash = hash * 31 + JodaBeanUtils.hashCode(impliedVolatility);
    hash = hash * 31 + JodaBeanUtils.hashCode(isCall);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("BlackSimplifiedData{");
    buf.append("strike").append('=').append(JodaBeanUtils.toString(strike)).append(',').append(' ');
    buf.append("timeToExpiry").append('=').append(JodaBeanUtils.toString(timeToExpiry)).append(',').append(' ');
    buf.append("impliedVolatility").append('=').append(JodaBeanUtils.toString(impliedVolatility)).append(',').append(' ');
    buf.append("isCall").append('=').append(JodaBeanUtils.toString(isCall));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code BlackSimplifiedData}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code strike} property.
     */
    private final MetaProperty<Double> strike = DirectMetaProperty.ofImmutable(
        this, "strike", BlackSimplifiedData.class, Double.TYPE);
    /**
     * The meta-property for the {@code timeToExpiry} property.
     */
    private final MetaProperty<Double> timeToExpiry = DirectMetaProperty.ofImmutable(
        this, "timeToExpiry", BlackSimplifiedData.class, Double.TYPE);
    /**
     * The meta-property for the {@code impliedVolatility} property.
     */
    private final MetaProperty<Double> impliedVolatility = DirectMetaProperty.ofImmutable(
        this, "impliedVolatility", BlackSimplifiedData.class, Double.TYPE);
    /**
     * The meta-property for the {@code isCall} property.
     */
    private final MetaProperty<Boolean> isCall = DirectMetaProperty.ofImmutable(
        this, "isCall", BlackSimplifiedData.class, Boolean.TYPE);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "strike",
        "timeToExpiry",
        "impliedVolatility",
        "isCall");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return strike;
        case -1831499397:  // timeToExpiry
          return timeToExpiry;
        case -989802771:  // impliedVolatility
          return impliedVolatility;
        case -1180608856:  // isCall
          return isCall;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BlackSimplifiedData.Builder builder() {
      return new BlackSimplifiedData.Builder();
    }

    @Override
    public Class<? extends BlackSimplifiedData> beanType() {
      return BlackSimplifiedData.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code strike} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> strike() {
      return strike;
    }

    /**
     * The meta-property for the {@code timeToExpiry} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> timeToExpiry() {
      return timeToExpiry;
    }

    /**
     * The meta-property for the {@code impliedVolatility} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> impliedVolatility() {
      return impliedVolatility;
    }

    /**
     * The meta-property for the {@code isCall} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Boolean> isCall() {
      return isCall;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return ((BlackSimplifiedData) bean).getStrike();
        case -1831499397:  // timeToExpiry
          return ((BlackSimplifiedData) bean).getTimeToExpiry();
        case -989802771:  // impliedVolatility
          return ((BlackSimplifiedData) bean).getImpliedVolatility();
        case -1180608856:  // isCall
          return ((BlackSimplifiedData) bean).isIsCall();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code BlackSimplifiedData}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<BlackSimplifiedData> {

    private double strike;
    private double timeToExpiry;
    private double impliedVolatility;
    private boolean isCall;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(BlackSimplifiedData beanToCopy) {
      this.strike = beanToCopy.getStrike();
      this.timeToExpiry = beanToCopy.getTimeToExpiry();
      this.impliedVolatility = beanToCopy.getImpliedVolatility();
      this.isCall = beanToCopy.isIsCall();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          return strike;
        case -1831499397:  // timeToExpiry
          return timeToExpiry;
        case -989802771:  // impliedVolatility
          return impliedVolatility;
        case -1180608856:  // isCall
          return isCall;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -891985998:  // strike
          this.strike = (Double) newValue;
          break;
        case -1831499397:  // timeToExpiry
          this.timeToExpiry = (Double) newValue;
          break;
        case -989802771:  // impliedVolatility
          this.impliedVolatility = (Double) newValue;
          break;
        case -1180608856:  // isCall
          this.isCall = (Boolean) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public BlackSimplifiedData build() {
      return new BlackSimplifiedData(
          strike,
          timeToExpiry,
          impliedVolatility,
          isCall);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the strike.
     * @param strike  the new value
     * @return this, for chaining, not null
     */
    public Builder strike(double strike) {
      this.strike = strike;
      return this;
    }

    /**
     * Sets the timeToExpiry.
     * @param timeToExpiry  the new value
     * @return this, for chaining, not null
     */
    public Builder timeToExpiry(double timeToExpiry) {
      this.timeToExpiry = timeToExpiry;
      return this;
    }

    /**
     * Sets the impliedVolatility.
     * @param impliedVolatility  the new value
     * @return this, for chaining, not null
     */
    public Builder impliedVolatility(double impliedVolatility) {
      this.impliedVolatility = impliedVolatility;
      return this;
    }

    /**
     * Sets the isCall.
     * @param isCall  the new value
     * @return this, for chaining, not null
     */
    public Builder isCall(boolean isCall) {
      this.isCall = isCall;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("BlackSimplifiedData.Builder{");
      buf.append("strike").append('=').append(JodaBeanUtils.toString(strike)).append(',').append(' ');
      buf.append("timeToExpiry").append('=').append(JodaBeanUtils.toString(timeToExpiry)).append(',').append(' ');
      buf.append("impliedVolatility").append('=').append(JodaBeanUtils.toString(impliedVolatility)).append(',').append(' ');
      buf.append("isCall").append('=').append(JodaBeanUtils.toString(isCall));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
