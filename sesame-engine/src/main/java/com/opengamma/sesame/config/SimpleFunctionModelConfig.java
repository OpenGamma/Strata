/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.config;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import javax.annotation.Nullable;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.opengamma.sesame.function.Parameter;
import com.opengamma.util.ArgumentChecker;

/**
 * Basic function configuration implementation providing implementations and arguments.
 */
@BeanDefinition
public final class SimpleFunctionModelConfig implements FunctionModelConfig, ImmutableBean {

  public static final SimpleFunctionModelConfig EMPTY =
      new SimpleFunctionModelConfig(ImmutableMap.<Class<?>, Class<?>>of(), ImmutableMap.<Class<?>, SimpleFunctionArguments>of());

  /**
   * The function implementation classes keyed by function interface.
   * This only needs to be populated if the implementation is not the default.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<Class<?>, Class<?>> _implementations;

  /** The user-specified function arguments keyed by function implementation. */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<Class<?>, SimpleFunctionArguments> _arguments;

  @ImmutableConstructor
  public SimpleFunctionModelConfig(Map<Class<?>, Class<?>> implementations,
                                   Map<Class<?>, SimpleFunctionArguments> arguments) {
    _arguments = ImmutableMap.copyOf(ArgumentChecker.notNull(arguments, "arguments"));
    _implementations = ImmutableMap.copyOf(ArgumentChecker.notNull(implementations, "implementations"));
  }

  /**
   * Merges this configuration with another set, this configuration takes priority where there are duplicates.
   *
   * @param other configuration to merge with
   * @return the union of the configuration with settings from this instance taking priority
   */
  public SimpleFunctionModelConfig mergeWith(SimpleFunctionModelConfig other) {
    Map<Class<?>, Class<?>> impls = Maps.newHashMap(other._implementations);
    impls.putAll(_implementations);
    Set<Class<?>> types = Sets.union(_arguments.keySet(), other._arguments.keySet());
    Map<Class<?>, SimpleFunctionArguments> argMap = new HashMap<>(types.size());

    for (Class<?> type : types) {
      argMap.put(type, mergeArguments(_arguments.get(type), other._arguments.get(type)));
    }
    return new SimpleFunctionModelConfig(impls, argMap);
  }

  private static SimpleFunctionArguments mergeArguments(@Nullable SimpleFunctionArguments args1,
                                                        @Nullable SimpleFunctionArguments args2) {
    if (args1 == null) {
      return args2;
    } else if (args2 == null) {
      return args1;
    } else {
      return args1.mergeWith(args2);
    }
  }

  //-------------------------------------------------------------------------
  @Override
  public Class<?> getFunctionImplementation(Class<?> functionType) {
    return _implementations.get(functionType);
  }

  @Override
  public Class<?> getFunctionImplementation(Parameter parameter) {
    return null;
  }

  @Override
  public FunctionArguments getFunctionArguments(Class<?> functionType) {
    FunctionArguments functionArguments = _arguments.get(functionType);
    return functionArguments == null ? EmptyFunctionArguments.INSTANCE : functionArguments;
  }

  public static SimpleFunctionModelConfig empty() {
    return new SimpleFunctionModelConfig(Collections.<Class<?>, Class<?>>emptyMap(),
                                         Collections.<Class<?>, SimpleFunctionArguments>emptyMap());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SimpleFunctionModelConfig}.
   * @return the meta-bean, not null
   */
  public static SimpleFunctionModelConfig.Meta meta() {
    return SimpleFunctionModelConfig.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SimpleFunctionModelConfig.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static SimpleFunctionModelConfig.Builder builder() {
    return new SimpleFunctionModelConfig.Builder();
  }

  @Override
  public SimpleFunctionModelConfig.Meta metaBean() {
    return SimpleFunctionModelConfig.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the function implementation classes keyed by function interface.
   * This only needs to be populated if the implementation is not the default.
   * @return the value of the property, not null
   */
  public ImmutableMap<Class<?>, Class<?>> getImplementations() {
    return _implementations;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the user-specified function arguments keyed by function implementation.
   * @return the value of the property, not null
   */
  public ImmutableMap<Class<?>, SimpleFunctionArguments> getArguments() {
    return _arguments;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public SimpleFunctionModelConfig clone() {
    return this;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SimpleFunctionModelConfig other = (SimpleFunctionModelConfig) obj;
      return JodaBeanUtils.equal(getImplementations(), other.getImplementations()) &&
          JodaBeanUtils.equal(getArguments(), other.getArguments());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getImplementations());
    hash += hash * 31 + JodaBeanUtils.hashCode(getArguments());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("SimpleFunctionModelConfig{");
    buf.append("implementations").append('=').append(getImplementations()).append(',').append(' ');
    buf.append("arguments").append('=').append(JodaBeanUtils.toString(getArguments()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SimpleFunctionModelConfig}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code implementations} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<Class<?>, Class<?>>> _implementations = DirectMetaProperty.ofImmutable(
        this, "implementations", SimpleFunctionModelConfig.class, (Class) ImmutableMap.class);
    /**
     * The meta-property for the {@code arguments} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<Class<?>, SimpleFunctionArguments>> _arguments = DirectMetaProperty.ofImmutable(
        this, "arguments", SimpleFunctionModelConfig.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "implementations",
        "arguments");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 643812097:  // implementations
          return _implementations;
        case -2035517098:  // arguments
          return _arguments;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public SimpleFunctionModelConfig.Builder builder() {
      return new SimpleFunctionModelConfig.Builder();
    }

    @Override
    public Class<? extends SimpleFunctionModelConfig> beanType() {
      return SimpleFunctionModelConfig.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code implementations} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<Class<?>, Class<?>>> implementations() {
      return _implementations;
    }

    /**
     * The meta-property for the {@code arguments} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<Class<?>, SimpleFunctionArguments>> arguments() {
      return _arguments;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 643812097:  // implementations
          return ((SimpleFunctionModelConfig) bean).getImplementations();
        case -2035517098:  // arguments
          return ((SimpleFunctionModelConfig) bean).getArguments();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code SimpleFunctionModelConfig}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<SimpleFunctionModelConfig> {

    private Map<Class<?>, Class<?>> _implementations = new HashMap<Class<?>, Class<?>>();
    private Map<Class<?>, SimpleFunctionArguments> _arguments = new HashMap<Class<?>, SimpleFunctionArguments>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(SimpleFunctionModelConfig beanToCopy) {
      this._implementations = new HashMap<Class<?>, Class<?>>(beanToCopy.getImplementations());
      this._arguments = new HashMap<Class<?>, SimpleFunctionArguments>(beanToCopy.getArguments());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 643812097:  // implementations
          return _implementations;
        case -2035517098:  // arguments
          return _arguments;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 643812097:  // implementations
          this._implementations = (Map<Class<?>, Class<?>>) newValue;
          break;
        case -2035517098:  // arguments
          this._arguments = (Map<Class<?>, SimpleFunctionArguments>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public SimpleFunctionModelConfig build() {
      return new SimpleFunctionModelConfig(
          _implementations,
          _arguments);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code implementations} property in the builder.
     * @param implementations  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder implementations(Map<Class<?>, Class<?>> implementations) {
      JodaBeanUtils.notNull(implementations, "implementations");
      this._implementations = implementations;
      return this;
    }

    /**
     * Sets the {@code arguments} property in the builder.
     * @param arguments  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder arguments(Map<Class<?>, SimpleFunctionArguments> arguments) {
      JodaBeanUtils.notNull(arguments, "arguments");
      this._arguments = arguments;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("SimpleFunctionModelConfig.Builder{");
      buf.append("implementations").append('=').append(JodaBeanUtils.toString(_implementations)).append(',').append(' ');
      buf.append("arguments").append('=').append(JodaBeanUtils.toString(_arguments));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
