/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.source.link;

import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableConstructor;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.collect.ArgChecker;
import com.opengamma.platform.source.id.IdentifiableBean;
import com.opengamma.platform.source.id.StandardId;

/**
 * A link to an object using the object's identifier and type
 * which can be resolved on demand. Use of links allows
 * references to be made between separate serialized objects.
 * These objects can then be updated independently of each other
 * and the link will point at the correct version (dependent on
 * the link resolution that is performed.
 * <p>
 * Links are expected to be resolvable i.e. it is reasonable to
 * expect that when {@link #resolve(LinkResolver)} is called, the
 * target of the link is available. For this reason, if the
 * target is not found, a {@link LinkResolutionException} will
 * be thrown.
 *
 * @param <T> type of the link, which ensures that when the link
 *   is resolved no casting is required by the caller
 */
@BeanDefinition(builderScope = "private")
public final class ResolvableLink<T extends IdentifiableBean> implements Link<T>, ImmutableBean {

  /**
   * The identifier for the link target.
   */
  @PropertyDefinition(validate = "notNull")
  private final StandardId identifier;

  /**
   * The type of the link target.
   */
  @PropertyDefinition(validate = "notNull")
  private final Class<T> linkType;

  /**
   * Creates the link. Not intended to be called directly,
   * use {@link Link#resolvable(StandardId, Class)} instead.
   *
   * @param identifier  the identifier for the link target
   * @param linkType  the type of the link target
   */
  @ImmutableConstructor
  ResolvableLink(StandardId identifier, Class<T> linkType) {
    this.identifier = ArgChecker.notNull(identifier, "identifier");
    this.linkType = ArgChecker.notNull(linkType, "linkType");
  }

  @Override
  public T resolve(LinkResolver linkResolver) {
    ArgChecker.notNull(linkResolver, "linkResolver");
    return linkResolver.resolve(this);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code ResolvableLink}.
   * @return the meta-bean, not null
   */
  @SuppressWarnings("rawtypes")
  public static ResolvableLink.Meta meta() {
    return ResolvableLink.Meta.INSTANCE;
  }

  /**
   * The meta-bean for {@code ResolvableLink}.
   * @param <R>  the bean's generic type
   * @param cls  the bean's generic type
   * @return the meta-bean, not null
   */
  @SuppressWarnings("unchecked")
  public static <R extends IdentifiableBean> ResolvableLink.Meta<R> metaResolvableLink(Class<R> cls) {
    return ResolvableLink.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(ResolvableLink.Meta.INSTANCE);
  }

  @SuppressWarnings("unchecked")
  @Override
  public ResolvableLink.Meta<T> metaBean() {
    return ResolvableLink.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the identifier for the link target.
   * @return the value of the property, not null
   */
  public StandardId getIdentifier() {
    return identifier;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type of the link target.
   * @return the value of the property, not null
   */
  public Class<T> getLinkType() {
    return linkType;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      ResolvableLink<?> other = (ResolvableLink<?>) obj;
      return JodaBeanUtils.equal(getIdentifier(), other.getIdentifier()) &&
          JodaBeanUtils.equal(getLinkType(), other.getLinkType());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getIdentifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getLinkType());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("ResolvableLink{");
    buf.append("identifier").append('=').append(getIdentifier()).append(',').append(' ');
    buf.append("linkType").append('=').append(JodaBeanUtils.toString(getLinkType()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code ResolvableLink}.
   * @param <T>  the type
   */
  public static final class Meta<T extends IdentifiableBean> extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    @SuppressWarnings("rawtypes")
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code identifier} property.
     */
    private final MetaProperty<StandardId> identifier = DirectMetaProperty.ofImmutable(
        this, "identifier", ResolvableLink.class, StandardId.class);
    /**
     * The meta-property for the {@code linkType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<T>> linkType = DirectMetaProperty.ofImmutable(
        this, "linkType", ResolvableLink.class, (Class) Class.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "identifier",
        "linkType");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1618432855:  // identifier
          return identifier;
        case 1194206804:  // linkType
          return linkType;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends ResolvableLink<T>> builder() {
      return new ResolvableLink.Builder<T>();
    }

    @SuppressWarnings({"unchecked", "rawtypes" })
    @Override
    public Class<? extends ResolvableLink<T>> beanType() {
      return (Class) ResolvableLink.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code identifier} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> identifier() {
      return identifier;
    }

    /**
     * The meta-property for the {@code linkType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Class<T>> linkType() {
      return linkType;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1618432855:  // identifier
          return ((ResolvableLink<?>) bean).getIdentifier();
        case 1194206804:  // linkType
          return ((ResolvableLink<?>) bean).getLinkType();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code ResolvableLink}.
   * @param <T>  the type
   */
  private static final class Builder<T extends IdentifiableBean> extends DirectFieldsBeanBuilder<ResolvableLink<T>> {

    private StandardId identifier;
    private Class<T> linkType;

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1618432855:  // identifier
          return identifier;
        case 1194206804:  // linkType
          return linkType;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder<T> set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1618432855:  // identifier
          this.identifier = (StandardId) newValue;
          break;
        case 1194206804:  // linkType
          this.linkType = (Class<T>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder<T> set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder<T> setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder<T> setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder<T> setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public ResolvableLink<T> build() {
      return new ResolvableLink<T>(
          identifier,
          linkType);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("ResolvableLink.Builder{");
      buf.append("identifier").append('=').append(JodaBeanUtils.toString(identifier)).append(',').append(' ');
      buf.append("linkType").append('=').append(JodaBeanUtils.toString(linkType));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
