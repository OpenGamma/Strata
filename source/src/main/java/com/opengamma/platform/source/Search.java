/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.source;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableDefaults;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.platform.source.id.IdentifiableBean;

/**
 * A simple search object which can be used to search for
 * objects via the {@link SearchableSource#search(Search)}
 * method. There is no minimum number of criteria to specify.
 * However, if no criteria are specified and the source
 * contains a large amount of data, the search is likely
 * to be slow.
 * <p>
 * Note that future enhancements will likely allow ANDing
 * and ORing of multiple criteria.
 */
@BeanDefinition
public final class Search implements ImmutableBean, Serializable {

  /**
   * Type that specifies to search for instances that are the
   * same type or subclasses of the specified type.
   * <p>
   * If the specified type is an interface then ideally
   * the interface should be annotated with
   * {@link CategorisingType}. This will result in better
   * performance. Note that if the specified type is too broad,
   * the search may be slow.
   * <p>
   * Note that a default value of {@code Object.class} is used,
   * but this will be ignored when the search is actually
   * executed. When {@code Optional}s are supported by
   * Joda beans then this should be an {@code Optional}.
   */
  @PropertyDefinition(validate = "notNull")
  private final Class<?> categorisingType;

  /**
   * Specifies attributes to be searched for. All attributes
   * must match exactly for an object to be matched. Note that
   * attributes that have been indexed will likely perform much
   * better than those that have not.
   */
  @PropertyDefinition(validate = "notNull")
  private final Map<String, String> attributes;

  /**
   * Checks whether the supplied bean matches the search
   * defined by this instance.
   *
   * @param item  the bean to be checked against this search
   * @return true if the supplied bean matches
   */
  public boolean matches(IdentifiableBean item) {
    MetaBean metaBean = item.metaBean();
    return categorisingType.isAssignableFrom(item.getClass()) &&
        attributes.entrySet().stream().allMatch(
            e -> metaBean.metaPropertyExists(e.getKey()) &&
              e.getValue().equals(metaBean.metaProperty(e.getKey()).getString(item)));
  }

  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder
        .categorisingType(Object.class)
        .attributes(ImmutableMap.of());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Search}.
   * @return the meta-bean, not null
   */
  public static Search.Meta meta() {
    return Search.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Search.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Search.Builder builder() {
    return new Search.Builder();
  }

  private Search(
      Class<?> categorisingType,
      Map<String, String> attributes) {
    JodaBeanUtils.notNull(categorisingType, "categorisingType");
    JodaBeanUtils.notNull(attributes, "attributes");
    this.categorisingType = categorisingType;
    this.attributes = ImmutableMap.copyOf(attributes);
  }

  @Override
  public Search.Meta metaBean() {
    return Search.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets type that specifies to search for instances that are the
   * same type or subclasses of the specified type.
   * <p>
   * If the specified type is an interface then ideally
   * the interface should be annotated with
   * {@link CategorisingType}. This will result in better
   * performance. Note that if the specified type is too broad,
   * the search may be slow.
   * <p>
   * Note that a default value of {@code Object.class} is used,
   * but this will be ignored when the search is actually
   * executed. When {@code Optional}s are supported by
   * Joda beans then this should be an {@code Optional}.
   * @return the value of the property, not null
   */
  public Class<?> getCategorisingType() {
    return categorisingType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets specifies attributes to be searched for. All attributes
   * must match exactly for an object to be matched. Note that
   * attributes that have been indexed will likely perform much
   * better than those that have not.
   * @return the value of the property, not null
   */
  public Map<String, String> getAttributes() {
    return attributes;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Search other = (Search) obj;
      return JodaBeanUtils.equal(getCategorisingType(), other.getCategorisingType()) &&
          JodaBeanUtils.equal(getAttributes(), other.getAttributes());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getCategorisingType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getAttributes());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(96);
    buf.append("Search{");
    buf.append("categorisingType").append('=').append(getCategorisingType()).append(',').append(' ');
    buf.append("attributes").append('=').append(JodaBeanUtils.toString(getAttributes()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Search}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code categorisingType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Class<?>> categorisingType = DirectMetaProperty.ofImmutable(
        this, "categorisingType", Search.class, (Class) Class.class);
    /**
     * The meta-property for the {@code attributes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<String, String>> attributes = DirectMetaProperty.ofImmutable(
        this, "attributes", Search.class, (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "categorisingType",
        "attributes");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 407105879:  // categorisingType
          return categorisingType;
        case 405645655:  // attributes
          return attributes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Search.Builder builder() {
      return new Search.Builder();
    }

    @Override
    public Class<? extends Search> beanType() {
      return Search.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code categorisingType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Class<?>> categorisingType() {
      return categorisingType;
    }

    /**
     * The meta-property for the {@code attributes} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Map<String, String>> attributes() {
      return attributes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 407105879:  // categorisingType
          return ((Search) bean).getCategorisingType();
        case 405645655:  // attributes
          return ((Search) bean).getAttributes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Search}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<Search> {

    private Class<?> categorisingType;
    private Map<String, String> attributes = new HashMap<String, String>();

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(Search beanToCopy) {
      this.categorisingType = beanToCopy.getCategorisingType();
      this.attributes = new HashMap<String, String>(beanToCopy.getAttributes());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 407105879:  // categorisingType
          return categorisingType;
        case 405645655:  // attributes
          return attributes;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 407105879:  // categorisingType
          this.categorisingType = (Class<?>) newValue;
          break;
        case 405645655:  // attributes
          this.attributes = (Map<String, String>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public Search build() {
      return new Search(
          categorisingType,
          attributes);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code categorisingType} property in the builder.
     * @param categorisingType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder categorisingType(Class<?> categorisingType) {
      JodaBeanUtils.notNull(categorisingType, "categorisingType");
      this.categorisingType = categorisingType;
      return this;
    }

    /**
     * Sets the {@code attributes} property in the builder.
     * @param attributes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder attributes(Map<String, String> attributes) {
      JodaBeanUtils.notNull(attributes, "attributes");
      this.attributes = attributes;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(96);
      buf.append("Search.Builder{");
      buf.append("categorisingType").append('=').append(JodaBeanUtils.toString(categorisingType)).append(',').append(' ');
      buf.append("attributes").append('=').append(JodaBeanUtils.toString(attributes));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
