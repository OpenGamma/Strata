/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.platform.source;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.ImmutableValidator;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.platform.source.id.IdentifiableBean;
import com.opengamma.platform.source.id.StandardId;

/**
 * A search object which can be used to search for
 * objects via the {@link SearchableSource#search(Search)}
 * method. The scheme for the data is mandatory but beyond
 * that there is no minimum number of criteria to specify.
 * However, if no additional criteria are specified and the
 * source contains a large amount of data, the search is
 * likely to be slow.
 * <p>
 * A {@link SearchBuilder} helper class is provided which
 * may make creation of instances easier.
 */
@BeanDefinition
public final class Search implements ImmutableBean, Serializable {

  /**
   * The {@link StandardId} scheme to search for. This
   * effectively specifies the type of data to be
   * searched for.
   */
  @PropertyDefinition(validate = "notNull")
  private final String scheme;

  /**
   * Optional class that specifies whether to search for
   * instances that are the same type or subclasses of the
   * specified type. This is useful if the specific
   * implementation type is unknown. Note that if the
   * specified type is too broad, the search is likely
   * to be slow.
   * <p>
   * If both this and {@link #specificType} are specified,
   * then the super type will not be used in the search as
   * it is unnecessary. However, the specified supertype
   * must be a parent of the specific type else an exception
   * will be thrown.
   */
  @PropertyDefinition(validate = "notNull")
  private final Optional<Class<?>> superType;

  /**
   * Optional class that specifies whether to search for
   * instances that are of the same type as the specified
   * type.
   * <p>
   * If both this and {@link #superType} are specified,
   * then the super type will not be used in the search as
   * it is unnecessary. However, the specified supertype
   * must be a parent of this type else an exception
   * will be thrown.
   */
  @PropertyDefinition(validate = "notNull")
  private final Optional<Class<? extends IdentifiableBean>> specificType;

  /**
   * Specifies attributes to be searched for. All attributes
   * must match exactly for an object to be matched. Note that
   * attributes that have been indexed will likely perform much
   * better than those that have not.
   */
  @PropertyDefinition(validate = "notNull")
  private final Map<String, String> attributes;

  /**
   * Checks whether the supplied bean matches the search
   * defined by this instance.
   *
   * @param item  the bean to be checked against this search
   * @return true if the supplied bean matches
   */
  public boolean validateItem(IdentifiableBean item) {
    MetaBean metaBean = item.metaBean();
    return item.getStandardId().isScheme(scheme) &&
        superType.map(st -> st.isAssignableFrom(item.getClass())).orElse(true) &&
        specificType.map(st -> st == item.getClass()).orElse(true) &&
        attributes.entrySet().stream().allMatch(
            e -> metaBean.metaPropertyExists(e.getKey()) &&
              e.getValue().equals(metaBean.metaProperty(e.getKey()).getString(item)));
  }

  @ImmutableValidator
  private void check() {

    if (specificType.map(Class::isInterface).orElse(false)) {
      throw new IllegalArgumentException("Specific type must be a concrete class - " +
          specificType.get().getSimpleName() + " is an interface");
    }

    // Check that if both supertype and specific type are set
    // then we can assign to the supertype from the specific type
    boolean valid = superType.flatMap(st -> specificType.map(st::isAssignableFrom)).orElse(true);
    if (!valid) {
      throw new IllegalArgumentException("Types are not compatible - " + superType.get().getSimpleName() +
          " is not assignable from " + specificType.get().getSimpleName());
    }
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code Search}.
   * @return the meta-bean, not null
   */
  public static Search.Meta meta() {
    return Search.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(Search.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static Search.Builder builder() {
    return new Search.Builder();
  }

  private Search(
      String scheme,
      Optional<Class<?>> superType,
      Optional<Class<? extends IdentifiableBean>> specificType,
      Map<String, String> attributes) {
    JodaBeanUtils.notNull(scheme, "scheme");
    JodaBeanUtils.notNull(superType, "superType");
    JodaBeanUtils.notNull(specificType, "specificType");
    JodaBeanUtils.notNull(attributes, "attributes");
    this.scheme = scheme;
    this.superType = superType;
    this.specificType = specificType;
    this.attributes = ImmutableMap.copyOf(attributes);
    check();
  }

  @Override
  public Search.Meta metaBean() {
    return Search.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the {@link StandardId} scheme to search for. This
   * effectively specifies the type of data to be
   * searched for.
   * @return the value of the property, not null
   */
  public String getScheme() {
    return scheme;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets optional class that specifies whether to search for
   * instances that are the same type or subclasses of the
   * specified type. This is useful if the specific
   * implementation type is unknown. Note that if the
   * specified type is too broad, the search is likely
   * to be slow.
   * <p>
   * If both this and {@link #specificType} are specified,
   * then the super type will not be used in the search as
   * it is unnecessary. However, the specified supertype
   * must be a parent of the specific type else an exception
   * will be thrown.
   * @return the value of the property, not null
   */
  public Optional<Class<?>> getSuperType() {
    return superType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets optional class that specifies whether to search for
   * instances that are of the same type as the specified
   * type.
   * <p>
   * If both this and {@link #superType} are specified,
   * then the super type will not be used in the search as
   * it is unnecessary. However, the specified supertype
   * must be a parent of this type else an exception
   * will be thrown.
   * @return the value of the property, not null
   */
  public Optional<Class<? extends IdentifiableBean>> getSpecificType() {
    return specificType;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets specifies attributes to be searched for. All attributes
   * must match exactly for an object to be matched. Note that
   * attributes that have been indexed will likely perform much
   * better than those that have not.
   * @return the value of the property, not null
   */
  public Map<String, String> getAttributes() {
    return attributes;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      Search other = (Search) obj;
      return JodaBeanUtils.equal(getScheme(), other.getScheme()) &&
          JodaBeanUtils.equal(getSuperType(), other.getSuperType()) &&
          JodaBeanUtils.equal(getSpecificType(), other.getSpecificType()) &&
          JodaBeanUtils.equal(getAttributes(), other.getAttributes());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getScheme());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSuperType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getSpecificType());
    hash += hash * 31 + JodaBeanUtils.hashCode(getAttributes());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("Search{");
    buf.append("scheme").append('=').append(getScheme()).append(',').append(' ');
    buf.append("superType").append('=').append(getSuperType()).append(',').append(' ');
    buf.append("specificType").append('=').append(getSpecificType()).append(',').append(' ');
    buf.append("attributes").append('=').append(JodaBeanUtils.toString(getAttributes()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code Search}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code scheme} property.
     */
    private final MetaProperty<String> scheme = DirectMetaProperty.ofImmutable(
        this, "scheme", Search.class, String.class);
    /**
     * The meta-property for the {@code superType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Optional<Class<?>>> superType = DirectMetaProperty.ofImmutable(
        this, "superType", Search.class, (Class) Optional.class);
    /**
     * The meta-property for the {@code specificType} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Optional<Class<? extends IdentifiableBean>>> specificType = DirectMetaProperty.ofImmutable(
        this, "specificType", Search.class, (Class) Optional.class);
    /**
     * The meta-property for the {@code attributes} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Map<String, String>> attributes = DirectMetaProperty.ofImmutable(
        this, "attributes", Search.class, (Class) Map.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "scheme",
        "superType",
        "specificType",
        "attributes");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -907987547:  // scheme
          return scheme;
        case -332841643:  // superType
          return superType;
        case -1205140596:  // specificType
          return specificType;
        case 405645655:  // attributes
          return attributes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public Search.Builder builder() {
      return new Search.Builder();
    }

    @Override
    public Class<? extends Search> beanType() {
      return Search.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code scheme} property.
     * @return the meta-property, not null
     */
    public MetaProperty<String> scheme() {
      return scheme;
    }

    /**
     * The meta-property for the {@code superType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Optional<Class<?>>> superType() {
      return superType;
    }

    /**
     * The meta-property for the {@code specificType} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Optional<Class<? extends IdentifiableBean>>> specificType() {
      return specificType;
    }

    /**
     * The meta-property for the {@code attributes} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Map<String, String>> attributes() {
      return attributes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -907987547:  // scheme
          return ((Search) bean).getScheme();
        case -332841643:  // superType
          return ((Search) bean).getSuperType();
        case -1205140596:  // specificType
          return ((Search) bean).getSpecificType();
        case 405645655:  // attributes
          return ((Search) bean).getAttributes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code Search}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<Search> {

    private String scheme;
    private Optional<Class<?>> superType;
    private Optional<Class<? extends IdentifiableBean>> specificType;
    private Map<String, String> attributes = new HashMap<String, String>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(Search beanToCopy) {
      this.scheme = beanToCopy.getScheme();
      this.superType = beanToCopy.getSuperType();
      this.specificType = beanToCopy.getSpecificType();
      this.attributes = new HashMap<String, String>(beanToCopy.getAttributes());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -907987547:  // scheme
          return scheme;
        case -332841643:  // superType
          return superType;
        case -1205140596:  // specificType
          return specificType;
        case 405645655:  // attributes
          return attributes;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -907987547:  // scheme
          this.scheme = (String) newValue;
          break;
        case -332841643:  // superType
          this.superType = (Optional<Class<?>>) newValue;
          break;
        case -1205140596:  // specificType
          this.specificType = (Optional<Class<? extends IdentifiableBean>>) newValue;
          break;
        case 405645655:  // attributes
          this.attributes = (Map<String, String>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.setString(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public Search build() {
      return new Search(
          scheme,
          superType,
          specificType,
          attributes);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code scheme} property in the builder.
     * @param scheme  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder scheme(String scheme) {
      JodaBeanUtils.notNull(scheme, "scheme");
      this.scheme = scheme;
      return this;
    }

    /**
     * Sets the {@code superType} property in the builder.
     * @param superType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder superType(Optional<Class<?>> superType) {
      JodaBeanUtils.notNull(superType, "superType");
      this.superType = superType;
      return this;
    }

    /**
     * Sets the {@code specificType} property in the builder.
     * @param specificType  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder specificType(Optional<Class<? extends IdentifiableBean>> specificType) {
      JodaBeanUtils.notNull(specificType, "specificType");
      this.specificType = specificType;
      return this;
    }

    /**
     * Sets the {@code attributes} property in the builder.
     * @param attributes  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder attributes(Map<String, String> attributes) {
      JodaBeanUtils.notNull(attributes, "attributes");
      this.attributes = attributes;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("Search.Builder{");
      buf.append("scheme").append('=').append(JodaBeanUtils.toString(scheme)).append(',').append(' ');
      buf.append("superType").append('=').append(JodaBeanUtils.toString(superType)).append(',').append(' ');
      buf.append("specificType").append('=').append(JodaBeanUtils.toString(specificType)).append(',').append(' ');
      buf.append("attributes").append('=').append(JodaBeanUtils.toString(attributes));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
