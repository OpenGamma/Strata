/**
 * Copyright (C) 2013 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.component;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.component.rest.JerseyRestResourceFactory;
import com.opengamma.sesame.server.FunctionServer;
import com.opengamma.sesame.web.analytics.WebAnalyticsData;
import com.opengamma.sesame.web.analytics.WebAnalyticsUris;
import com.opengamma.sesame.web.analytics.WebAnalyticsViewsResource;
import com.opengamma.web.WebHomeResource;

/**
 * Component factory for the engine.
 */
@BeanDefinition
public class WebsiteAnalyticsComponentFactory extends AbstractComponentFactory {

  /**
   * The function server.
   */
  @PropertyDefinition
  private FunctionServer _functionServer;

  //-------------------------------------------------------------------------
  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {
    repo.getRestComponents().getRootResourceFactories().add(
        new JerseyRestResourceFactory(WebAnalyticsViewsResource.class, getFunctionServer()));
    WebHomeResource.registerHomePageLink(
        WebAnalyticsViewsResource.class, WebAnalyticsData.class, WebAnalyticsUris.class, "analyticsUri");
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code WebsiteAnalyticsComponentFactory}.
   * @return the meta-bean, not null
   */
  public static WebsiteAnalyticsComponentFactory.Meta meta() {
    return WebsiteAnalyticsComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(WebsiteAnalyticsComponentFactory.Meta.INSTANCE);
  }

  @Override
  public WebsiteAnalyticsComponentFactory.Meta metaBean() {
    return WebsiteAnalyticsComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the function server.
   * @return the value of the property
   */
  public FunctionServer getFunctionServer() {
    return _functionServer;
  }

  /**
   * Sets the function server.
   * @param functionServer  the new value of the property
   */
  public void setFunctionServer(FunctionServer functionServer) {
    this._functionServer = functionServer;
  }

  /**
   * Gets the the {@code functionServer} property.
   * @return the property, not null
   */
  public final Property<FunctionServer> functionServer() {
    return metaBean().functionServer().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public WebsiteAnalyticsComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      WebsiteAnalyticsComponentFactory other = (WebsiteAnalyticsComponentFactory) obj;
      return JodaBeanUtils.equal(getFunctionServer(), other.getFunctionServer()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getFunctionServer());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("WebsiteAnalyticsComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("functionServer").append('=').append(JodaBeanUtils.toString(getFunctionServer())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code WebsiteAnalyticsComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code functionServer} property.
     */
    private final MetaProperty<FunctionServer> _functionServer = DirectMetaProperty.ofReadWrite(
        this, "functionServer", WebsiteAnalyticsComponentFactory.class, FunctionServer.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "functionServer");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1118417605:  // functionServer
          return _functionServer;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends WebsiteAnalyticsComponentFactory> builder() {
      return new DirectBeanBuilder<WebsiteAnalyticsComponentFactory>(new WebsiteAnalyticsComponentFactory());
    }

    @Override
    public Class<? extends WebsiteAnalyticsComponentFactory> beanType() {
      return WebsiteAnalyticsComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code functionServer} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FunctionServer> functionServer() {
      return _functionServer;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1118417605:  // functionServer
          return ((WebsiteAnalyticsComponentFactory) bean).getFunctionServer();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1118417605:  // functionServer
          ((WebsiteAnalyticsComponentFactory) bean).setFunctionServer((FunctionServer) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
