/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.cashflows;

import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.threeten.bp.LocalDate;

import com.opengamma.util.money.CurrencyAmount;

/**
 * Container for the relevant details for pricing a swap leg
 */
@BeanDefinition
public abstract class SwapLegCashFlows extends DirectBean {
  /**
   * The start accrual dates label.
   */
  public static final String START_ACCRUAL_DATES = "Start Accrual Date";
  /**
   * The end accrual dates label.
   */
  public static final String END_ACCRUAL_DATES = "End Accrual Date";
  /**
   * The notional label.
   */
  public static final String NOTIONAL = "Notional";
  /**
   * The payment time label.
   */
  public static final String PAYMENT_TIME = "Payment Time";
  /**
   * An array of accrual start dates.
   */
  @PropertyDefinition(validate = "notNull")
  private LocalDate[] _accrualStart;
  /**
   * An array of accrual end dates.
   */
  @PropertyDefinition(validate = "notNull")
  private LocalDate[] _accrualEnd;
  /**
   * An array of notionals.
   */
  @PropertyDefinition(validate = "notNull")
  private CurrencyAmount[] _notionals;
  /**
   * An array of payment times.
   */
  @PropertyDefinition(validate = "notNull")
  private double[] _paymentTimes;

  /**
   * For the builder.
   */
  /* package */ SwapLegCashFlows() {
    super();
  }
  /**
   * @param startAccrualDates The start accrual dates, not null
   * @param endAccrualDates The end accrual dates, not null
   * @param paymentTimes The payment times, not null
   * @param notionals The notionals, not null
   */
  public SwapLegCashFlows(LocalDate[] startAccrualDates,
                          LocalDate[] endAccrualDates,
                          double[] paymentTimes,
                          CurrencyAmount[] notionals) {
    setAccrualStart(startAccrualDates);
    setAccrualEnd(endAccrualDates);
    setNotionals(notionals);
    setPaymentTimes(paymentTimes);

  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code SwapLegCashFlows}.
   * @return the meta-bean, not null
   */
  public static SwapLegCashFlows.Meta meta() {
    return SwapLegCashFlows.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(SwapLegCashFlows.Meta.INSTANCE);
  }

  @Override
  public SwapLegCashFlows.Meta metaBean() {
    return SwapLegCashFlows.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets an array of accrual start dates.
   * @return the value of the property, not null
   */
  public LocalDate[] getAccrualStart() {
    return _accrualStart;
  }

  /**
   * Sets an array of accrual start dates.
   * @param accrualStart  the new value of the property, not null
   */
  public void setAccrualStart(LocalDate[] accrualStart) {
    JodaBeanUtils.notNull(accrualStart, "accrualStart");
    this._accrualStart = accrualStart;
  }

  /**
   * Gets the the {@code accrualStart} property.
   * @return the property, not null
   */
  public final Property<LocalDate[]> accrualStart() {
    return metaBean().accrualStart().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets an array of accrual end dates.
   * @return the value of the property, not null
   */
  public LocalDate[] getAccrualEnd() {
    return _accrualEnd;
  }

  /**
   * Sets an array of accrual end dates.
   * @param accrualEnd  the new value of the property, not null
   */
  public void setAccrualEnd(LocalDate[] accrualEnd) {
    JodaBeanUtils.notNull(accrualEnd, "accrualEnd");
    this._accrualEnd = accrualEnd;
  }

  /**
   * Gets the the {@code accrualEnd} property.
   * @return the property, not null
   */
  public final Property<LocalDate[]> accrualEnd() {
    return metaBean().accrualEnd().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets an array of notionals.
   * @return the value of the property, not null
   */
  public CurrencyAmount[] getNotionals() {
    return _notionals;
  }

  /**
   * Sets an array of notionals.
   * @param notionals  the new value of the property, not null
   */
  public void setNotionals(CurrencyAmount[] notionals) {
    JodaBeanUtils.notNull(notionals, "notionals");
    this._notionals = notionals;
  }

  /**
   * Gets the the {@code notionals} property.
   * @return the property, not null
   */
  public final Property<CurrencyAmount[]> notionals() {
    return metaBean().notionals().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets an array of payment times.
   * @return the value of the property, not null
   */
  public double[] getPaymentTimes() {
    return _paymentTimes;
  }

  /**
   * Sets an array of payment times.
   * @param paymentTimes  the new value of the property, not null
   */
  public void setPaymentTimes(double[] paymentTimes) {
    JodaBeanUtils.notNull(paymentTimes, "paymentTimes");
    this._paymentTimes = paymentTimes;
  }

  /**
   * Gets the the {@code paymentTimes} property.
   * @return the property, not null
   */
  public final Property<double[]> paymentTimes() {
    return metaBean().paymentTimes().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public SwapLegCashFlows clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      SwapLegCashFlows other = (SwapLegCashFlows) obj;
      return JodaBeanUtils.equal(getAccrualStart(), other.getAccrualStart()) &&
          JodaBeanUtils.equal(getAccrualEnd(), other.getAccrualEnd()) &&
          JodaBeanUtils.equal(getNotionals(), other.getNotionals()) &&
          JodaBeanUtils.equal(getPaymentTimes(), other.getPaymentTimes());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getAccrualStart());
    hash += hash * 31 + JodaBeanUtils.hashCode(getAccrualEnd());
    hash += hash * 31 + JodaBeanUtils.hashCode(getNotionals());
    hash += hash * 31 + JodaBeanUtils.hashCode(getPaymentTimes());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("SwapLegCashFlows{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("accrualStart").append('=').append(JodaBeanUtils.toString(getAccrualStart())).append(',').append(' ');
    buf.append("accrualEnd").append('=').append(JodaBeanUtils.toString(getAccrualEnd())).append(',').append(' ');
    buf.append("notionals").append('=').append(JodaBeanUtils.toString(getNotionals())).append(',').append(' ');
    buf.append("paymentTimes").append('=').append(JodaBeanUtils.toString(getPaymentTimes())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code SwapLegCashFlows}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code accrualStart} property.
     */
    private final MetaProperty<LocalDate[]> _accrualStart = DirectMetaProperty.ofReadWrite(
        this, "accrualStart", SwapLegCashFlows.class, LocalDate[].class);
    /**
     * The meta-property for the {@code accrualEnd} property.
     */
    private final MetaProperty<LocalDate[]> _accrualEnd = DirectMetaProperty.ofReadWrite(
        this, "accrualEnd", SwapLegCashFlows.class, LocalDate[].class);
    /**
     * The meta-property for the {@code notionals} property.
     */
    private final MetaProperty<CurrencyAmount[]> _notionals = DirectMetaProperty.ofReadWrite(
        this, "notionals", SwapLegCashFlows.class, CurrencyAmount[].class);
    /**
     * The meta-property for the {@code paymentTimes} property.
     */
    private final MetaProperty<double[]> _paymentTimes = DirectMetaProperty.ofReadWrite(
        this, "paymentTimes", SwapLegCashFlows.class, double[].class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "accrualStart",
        "accrualEnd",
        "notionals",
        "paymentTimes");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 1071260659:  // accrualStart
          return _accrualStart;
        case 1846909100:  // accrualEnd
          return _accrualEnd;
        case 1910080819:  // notionals
          return _notionals;
        case -507430688:  // paymentTimes
          return _paymentTimes;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends SwapLegCashFlows> builder() {
      throw new UnsupportedOperationException("SwapLegCashFlows is an abstract class");
    }

    @Override
    public Class<? extends SwapLegCashFlows> beanType() {
      return SwapLegCashFlows.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code accrualStart} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate[]> accrualStart() {
      return _accrualStart;
    }

    /**
     * The meta-property for the {@code accrualEnd} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LocalDate[]> accrualEnd() {
      return _accrualEnd;
    }

    /**
     * The meta-property for the {@code notionals} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<CurrencyAmount[]> notionals() {
      return _notionals;
    }

    /**
     * The meta-property for the {@code paymentTimes} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<double[]> paymentTimes() {
      return _paymentTimes;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1071260659:  // accrualStart
          return ((SwapLegCashFlows) bean).getAccrualStart();
        case 1846909100:  // accrualEnd
          return ((SwapLegCashFlows) bean).getAccrualEnd();
        case 1910080819:  // notionals
          return ((SwapLegCashFlows) bean).getNotionals();
        case -507430688:  // paymentTimes
          return ((SwapLegCashFlows) bean).getPaymentTimes();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 1071260659:  // accrualStart
          ((SwapLegCashFlows) bean).setAccrualStart((LocalDate[]) newValue);
          return;
        case 1846909100:  // accrualEnd
          ((SwapLegCashFlows) bean).setAccrualEnd((LocalDate[]) newValue);
          return;
        case 1910080819:  // notionals
          ((SwapLegCashFlows) bean).setNotionals((CurrencyAmount[]) newValue);
          return;
        case -507430688:  // paymentTimes
          ((SwapLegCashFlows) bean).setPaymentTimes((double[]) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((SwapLegCashFlows) bean)._accrualStart, "accrualStart");
      JodaBeanUtils.notNull(((SwapLegCashFlows) bean)._accrualEnd, "accrualEnd");
      JodaBeanUtils.notNull(((SwapLegCashFlows) bean)._notionals, "notionals");
      JodaBeanUtils.notNull(((SwapLegCashFlows) bean)._paymentTimes, "paymentTimes");
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
