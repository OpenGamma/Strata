/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.sesame.credit.config;

import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.google.common.collect.ImmutableMap;
import com.opengamma.core.config.Config;
import com.opengamma.financial.analytics.isda.credit.CreditCurveDataKey;

/**
 * Config object used to drive mapping from source credit keys to 
 * target credit keys. Source keys are inferred from some credit
 * security whereas target keys refer to curves in a credit curve
 * snapshot.
 */
@BeanDefinition
@Config(description = "Credit curve mappings", group = "Credit")
public final class CreditCurveDataKeyMap implements ImmutableBean {

  /**
   * A map containing mappings from source (security) credit keys to 
   * target (credit curve) credit keys.
   */
  @PropertyDefinition(validate = "notNull")
  private final ImmutableMap<CreditCurveDataKey, CreditCurveDataKey> _keyMap;
  
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CreditCurveDataKeyMap}.
   * @return the meta-bean, not null
   */
  public static CreditCurveDataKeyMap.Meta meta() {
    return CreditCurveDataKeyMap.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CreditCurveDataKeyMap.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static CreditCurveDataKeyMap.Builder builder() {
    return new CreditCurveDataKeyMap.Builder();
  }

  private CreditCurveDataKeyMap(
      Map<CreditCurveDataKey, CreditCurveDataKey> keyMap) {
    JodaBeanUtils.notNull(keyMap, "keyMap");
    this._keyMap = ImmutableMap.copyOf(keyMap);
  }

  @Override
  public CreditCurveDataKeyMap.Meta metaBean() {
    return CreditCurveDataKeyMap.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets a map containing mappings from source (security) credit keys to
   * target (credit curve) credit keys.
   * @return the value of the property, not null
   */
  public ImmutableMap<CreditCurveDataKey, CreditCurveDataKey> getKeyMap() {
    return _keyMap;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CreditCurveDataKeyMap other = (CreditCurveDataKeyMap) obj;
      return JodaBeanUtils.equal(getKeyMap(), other.getKeyMap());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getKeyMap());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(64);
    buf.append("CreditCurveDataKeyMap{");
    buf.append("keyMap").append('=').append(JodaBeanUtils.toString(getKeyMap()));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CreditCurveDataKeyMap}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code keyMap} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<ImmutableMap<CreditCurveDataKey, CreditCurveDataKey>> _keyMap = DirectMetaProperty.ofImmutable(
        this, "keyMap", CreditCurveDataKeyMap.class, (Class) ImmutableMap.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "keyMap");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1134690691:  // keyMap
          return _keyMap;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public CreditCurveDataKeyMap.Builder builder() {
      return new CreditCurveDataKeyMap.Builder();
    }

    @Override
    public Class<? extends CreditCurveDataKeyMap> beanType() {
      return CreditCurveDataKeyMap.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code keyMap} property.
     * @return the meta-property, not null
     */
    public MetaProperty<ImmutableMap<CreditCurveDataKey, CreditCurveDataKey>> keyMap() {
      return _keyMap;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1134690691:  // keyMap
          return ((CreditCurveDataKeyMap) bean).getKeyMap();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code CreditCurveDataKeyMap}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<CreditCurveDataKeyMap> {

    private Map<CreditCurveDataKey, CreditCurveDataKey> _keyMap = new HashMap<CreditCurveDataKey, CreditCurveDataKey>();

    /**
     * Restricted constructor.
     */
    private Builder() {
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(CreditCurveDataKeyMap beanToCopy) {
      this._keyMap = new HashMap<CreditCurveDataKey, CreditCurveDataKey>(beanToCopy.getKeyMap());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1134690691:  // keyMap
          return _keyMap;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1134690691:  // keyMap
          this._keyMap = (Map<CreditCurveDataKey, CreditCurveDataKey>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setString(String propertyName, String value) {
      setString(meta().metaProperty(propertyName), value);
      return this;
    }

    @Override
    public Builder setString(MetaProperty<?> property, String value) {
      super.set(property, value);
      return this;
    }

    @Override
    public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
      super.setAll(propertyValueMap);
      return this;
    }

    @Override
    public CreditCurveDataKeyMap build() {
      return new CreditCurveDataKeyMap(
          _keyMap);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the {@code keyMap} property in the builder.
     * @param keyMap  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder keyMap(Map<CreditCurveDataKey, CreditCurveDataKey> keyMap) {
      JodaBeanUtils.notNull(keyMap, "keyMap");
      this._keyMap = keyMap;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(64);
      buf.append("CreditCurveDataKeyMap.Builder{");
      buf.append("keyMap").append('=').append(JodaBeanUtils.toString(_keyMap));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
