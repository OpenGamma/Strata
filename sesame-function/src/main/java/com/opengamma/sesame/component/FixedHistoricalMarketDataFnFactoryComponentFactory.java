/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.component;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.core.historicaltimeseries.HistoricalTimeSeriesSource;
import com.opengamma.sesame.marketdata.FixedHistoricalMarketDataFnFactory;

/**
 * Creates a historical market data function factory.
 */
@BeanDefinition
public class FixedHistoricalMarketDataFnFactoryComponentFactory extends AbstractComponentFactory {

  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;

  /**
   * The source used to retrieve the historic data.
   */
  @PropertyDefinition(validate = "notNull")
  private HistoricalTimeSeriesSource _historicalTimeSeriesSource;

  /**
   * The currency matrix name.
   */
  // todo - this does not really belong here and should be moved somewhere more appropriate
  @PropertyDefinition(validate = "notNull")
  private String _currencyMatrixConfigName;

  /**
   * The data source name used to retrieve the historic data.
   */
  @PropertyDefinition
  private String _dataSource;

  /**
   * The data provider name.
   */
  @PropertyDefinition
  private String _dataProvider;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {

    FixedHistoricalMarketDataFnFactory factory = new FixedHistoricalMarketDataFnFactory(
        _historicalTimeSeriesSource, _currencyMatrixConfigName, _dataSource, _dataProvider);

    repo.registerComponent(FixedHistoricalMarketDataFnFactory.class, _classifier, factory);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code FixedHistoricalMarketDataFnFactoryComponentFactory}.
   * @return the meta-bean, not null
   */
  public static FixedHistoricalMarketDataFnFactoryComponentFactory.Meta meta() {
    return FixedHistoricalMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(FixedHistoricalMarketDataFnFactoryComponentFactory.Meta.INSTANCE);
  }

  @Override
  public FixedHistoricalMarketDataFnFactoryComponentFactory.Meta metaBean() {
    return FixedHistoricalMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency matrix name.
   * @return the value of the property, not null
   */
  public String getCurrencyMatrixConfigName() {
    return _currencyMatrixConfigName;
  }

  /**
   * Sets the currency matrix name.
   * @param currencyMatrixConfigName  the new value of the property, not null
   */
  public void setCurrencyMatrixConfigName(String currencyMatrixConfigName) {
    JodaBeanUtils.notNull(currencyMatrixConfigName, "currencyMatrixConfigName");
    this._currencyMatrixConfigName = currencyMatrixConfigName;
  }

  /**
   * Gets the the {@code currencyMatrixConfigName} property.
   * @return the property, not null
   */
  public final Property<String> currencyMatrixConfigName() {
    return metaBean().currencyMatrixConfigName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the historicalTimeSeriesSource.
   * @return the value of the property, not null
   */
  public HistoricalTimeSeriesSource getHistoricalTimeSeriesSource() {
    return _historicalTimeSeriesSource;
  }

  /**
   * Sets the historicalTimeSeriesSource.
   * @param historicalTimeSeriesSource  the new value of the property, not null
   */
  public void setHistoricalTimeSeriesSource(HistoricalTimeSeriesSource historicalTimeSeriesSource) {
    JodaBeanUtils.notNull(historicalTimeSeriesSource, "historicalTimeSeriesSource");
    this._historicalTimeSeriesSource = historicalTimeSeriesSource;
  }

  /**
   * Gets the the {@code historicalTimeSeriesSource} property.
   * @return the property, not null
   */
  public final Property<HistoricalTimeSeriesSource> historicalTimeSeriesSource() {
    return metaBean().historicalTimeSeriesSource().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the data source name used to retrieve the historic data.
   * @return the value of the property
   */
  public String getDataSource() {
    return _dataSource;
  }

  /**
   * Sets the data source name used to retrieve the historic data.
   * @param dataSource  the new value of the property
   */
  public void setDataSource(String dataSource) {
    this._dataSource = dataSource;
  }

  /**
   * Gets the the {@code dataSource} property.
   * @return the property, not null
   */
  public final Property<String> dataSource() {
    return metaBean().dataSource().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the data provider name.
   * @return the value of the property
   */
  public String getDataProvider() {
    return _dataProvider;
  }

  /**
   * Sets the data provider name.
   * @param dataProvider  the new value of the property
   */
  public void setDataProvider(String dataProvider) {
    this._dataProvider = dataProvider;
  }

  /**
   * Gets the the {@code dataProvider} property.
   * @return the property, not null
   */
  public final Property<String> dataProvider() {
    return metaBean().dataProvider().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public FixedHistoricalMarketDataFnFactoryComponentFactory clone() {
    return (FixedHistoricalMarketDataFnFactoryComponentFactory) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FixedHistoricalMarketDataFnFactoryComponentFactory other = (FixedHistoricalMarketDataFnFactoryComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getCurrencyMatrixConfigName(), other.getCurrencyMatrixConfigName()) &&
          JodaBeanUtils.equal(getHistoricalTimeSeriesSource(), other.getHistoricalTimeSeriesSource()) &&
          JodaBeanUtils.equal(getDataSource(), other.getDataSource()) &&
          JodaBeanUtils.equal(getDataProvider(), other.getDataProvider()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurrencyMatrixConfigName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getHistoricalTimeSeriesSource());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDataSource());
    hash += hash * 31 + JodaBeanUtils.hashCode(getDataProvider());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(192);
    buf.append("FixedHistoricalMarketDataFnFactoryComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("classifier").append('=').append(JodaBeanUtils.toString(getClassifier())).append(',').append(' ');
    buf.append("currencyMatrixConfigName").append('=').append(JodaBeanUtils.toString(getCurrencyMatrixConfigName())).append(',').append(' ');
    buf.append("historicalTimeSeriesSource").append('=').append(JodaBeanUtils.toString(getHistoricalTimeSeriesSource())).append(',').append(' ');
    buf.append("dataSource").append('=').append(JodaBeanUtils.toString(getDataSource())).append(',').append(' ');
    buf.append("dataProvider").append('=').append(JodaBeanUtils.toString(getDataProvider())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FixedHistoricalMarketDataFnFactoryComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", FixedHistoricalMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code currencyMatrixConfigName} property.
     */
    private final MetaProperty<String> _currencyMatrixConfigName = DirectMetaProperty.ofReadWrite(
        this, "currencyMatrixConfigName", FixedHistoricalMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code historicalTimeSeriesSource} property.
     */
    private final MetaProperty<HistoricalTimeSeriesSource> _historicalTimeSeriesSource = DirectMetaProperty.ofReadWrite(
        this, "historicalTimeSeriesSource", FixedHistoricalMarketDataFnFactoryComponentFactory.class, HistoricalTimeSeriesSource.class);
    /**
     * The meta-property for the {@code dataSource} property.
     */
    private final MetaProperty<String> _dataSource = DirectMetaProperty.ofReadWrite(
        this, "dataSource", FixedHistoricalMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code dataProvider} property.
     */
    private final MetaProperty<String> _dataProvider = DirectMetaProperty.ofReadWrite(
        this, "dataProvider", FixedHistoricalMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "currencyMatrixConfigName",
        "historicalTimeSeriesSource",
        "dataSource",
        "dataProvider");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case -687969857:  // currencyMatrixConfigName
          return _currencyMatrixConfigName;
        case 358729161:  // historicalTimeSeriesSource
          return _historicalTimeSeriesSource;
        case 1272470629:  // dataSource
          return _dataSource;
        case 339742651:  // dataProvider
          return _dataProvider;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends FixedHistoricalMarketDataFnFactoryComponentFactory> builder() {
      return new DirectBeanBuilder<FixedHistoricalMarketDataFnFactoryComponentFactory>(new FixedHistoricalMarketDataFnFactoryComponentFactory());
    }

    @Override
    public Class<? extends FixedHistoricalMarketDataFnFactoryComponentFactory> beanType() {
      return FixedHistoricalMarketDataFnFactoryComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code currencyMatrixConfigName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> currencyMatrixConfigName() {
      return _currencyMatrixConfigName;
    }

    /**
     * The meta-property for the {@code historicalTimeSeriesSource} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<HistoricalTimeSeriesSource> historicalTimeSeriesSource() {
      return _historicalTimeSeriesSource;
    }

    /**
     * The meta-property for the {@code dataSource} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> dataSource() {
      return _dataSource;
    }

    /**
     * The meta-property for the {@code dataProvider} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> dataProvider() {
      return _dataProvider;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).getClassifier();
        case -687969857:  // currencyMatrixConfigName
          return ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).getCurrencyMatrixConfigName();
        case 358729161:  // historicalTimeSeriesSource
          return ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).getHistoricalTimeSeriesSource();
        case 1272470629:  // dataSource
          return ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).getDataSource();
        case 339742651:  // dataProvider
          return ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).getDataProvider();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).setClassifier((String) newValue);
          return;
        case -687969857:  // currencyMatrixConfigName
          ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).setCurrencyMatrixConfigName((String) newValue);
          return;
        case 358729161:  // historicalTimeSeriesSource
          ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).setHistoricalTimeSeriesSource((HistoricalTimeSeriesSource) newValue);
          return;
        case 1272470629:  // dataSource
          ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).setDataSource((String) newValue);
          return;
        case 339742651:  // dataProvider
          ((FixedHistoricalMarketDataFnFactoryComponentFactory) bean).setDataProvider((String) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((FixedHistoricalMarketDataFnFactoryComponentFactory) bean)._classifier, "classifier");
      JodaBeanUtils.notNull(((FixedHistoricalMarketDataFnFactoryComponentFactory) bean)._currencyMatrixConfigName, "currencyMatrixConfigName");
      JodaBeanUtils.notNull(((FixedHistoricalMarketDataFnFactoryComponentFactory) bean)._historicalTimeSeriesSource, "historicalTimeSeriesSource");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
