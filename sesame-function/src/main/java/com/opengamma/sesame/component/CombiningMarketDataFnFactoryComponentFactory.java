/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.component;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.sesame.marketdata.FixedHistoricalMarketDataFactory;
import com.opengamma.sesame.marketdata.LiveMarketDataFactory;
import com.opengamma.sesame.marketdata.MarketDataFactory;
import com.opengamma.sesame.marketdata.SnapshotMarketDataFactory;
import com.opengamma.sesame.marketdata.TypeDelegatingMarketDataFactory;

/**
 * Creates a combined market data function factory from a set of individual
 * market data function factories.
 */
@BeanDefinition
public class CombiningMarketDataFnFactoryComponentFactory extends AbstractComponentFactory {

  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;

  /**
   * The LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   */
  @PropertyDefinition
  private LiveMarketDataFactory _liveMarketDataFactory;

  /**
   * The FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   */
  @PropertyDefinition
  private FixedHistoricalMarketDataFactory _fixedHistoricalMarketDataFactory;

  /**
   * The UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   */
  @PropertyDefinition
  private SnapshotMarketDataFactory _userSnapshotMarketDataFactory;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {

    TypeDelegatingMarketDataFactory.Builder builder = TypeDelegatingMarketDataFactory.builder();

    if (_liveMarketDataFactory != null) {
      builder.live(_liveMarketDataFactory);
    }
    if (_fixedHistoricalMarketDataFactory != null) {
      builder.fixedHistorical(_fixedHistoricalMarketDataFactory);
    }
    if (_userSnapshotMarketDataFactory != null) {
      builder.snapshot(_userSnapshotMarketDataFactory);
    }

    repo.registerComponent(MarketDataFactory.class, _classifier, builder.build());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CombiningMarketDataFnFactoryComponentFactory}.
   * @return the meta-bean, not null
   */
  public static CombiningMarketDataFnFactoryComponentFactory.Meta meta() {
    return CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE);
  }

  @Override
  public CombiningMarketDataFnFactoryComponentFactory.Meta metaBean() {
    return CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @return the value of the property
   */
  public LiveMarketDataFactory getLiveMarketDataFactory() {
    return _liveMarketDataFactory;
  }

  /**
   * Sets the LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @param liveMarketDataFactory  the new value of the property
   */
  public void setLiveMarketDataFactory(LiveMarketDataFactory liveMarketDataFactory) {
    this._liveMarketDataFactory = liveMarketDataFactory;
  }

  /**
   * Gets the the {@code liveMarketDataFactory} property.
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @return the property, not null
   */
  public final Property<LiveMarketDataFactory> liveMarketDataFactory() {
    return metaBean().liveMarketDataFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @return the value of the property
   */
  public FixedHistoricalMarketDataFactory getFixedHistoricalMarketDataFactory() {
    return _fixedHistoricalMarketDataFactory;
  }

  /**
   * Sets the FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @param fixedHistoricalMarketDataFactory  the new value of the property
   */
  public void setFixedHistoricalMarketDataFactory(FixedHistoricalMarketDataFactory fixedHistoricalMarketDataFactory) {
    this._fixedHistoricalMarketDataFactory = fixedHistoricalMarketDataFactory;
  }

  /**
   * Gets the the {@code fixedHistoricalMarketDataFactory} property.
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @return the property, not null
   */
  public final Property<FixedHistoricalMarketDataFactory> fixedHistoricalMarketDataFactory() {
    return metaBean().fixedHistoricalMarketDataFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @return the value of the property
   */
  public SnapshotMarketDataFactory getUserSnapshotMarketDataFactory() {
    return _userSnapshotMarketDataFactory;
  }

  /**
   * Sets the UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @param userSnapshotMarketDataFactory  the new value of the property
   */
  public void setUserSnapshotMarketDataFactory(SnapshotMarketDataFactory userSnapshotMarketDataFactory) {
    this._userSnapshotMarketDataFactory = userSnapshotMarketDataFactory;
  }

  /**
   * Gets the the {@code userSnapshotMarketDataFactory} property.
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @return the property, not null
   */
  public final Property<SnapshotMarketDataFactory> userSnapshotMarketDataFactory() {
    return metaBean().userSnapshotMarketDataFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public CombiningMarketDataFnFactoryComponentFactory clone() {
    return JodaBeanUtils.cloneAlways(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CombiningMarketDataFnFactoryComponentFactory other = (CombiningMarketDataFnFactoryComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getLiveMarketDataFactory(), other.getLiveMarketDataFactory()) &&
          JodaBeanUtils.equal(getFixedHistoricalMarketDataFactory(), other.getFixedHistoricalMarketDataFactory()) &&
          JodaBeanUtils.equal(getUserSnapshotMarketDataFactory(), other.getUserSnapshotMarketDataFactory()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getLiveMarketDataFactory());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFixedHistoricalMarketDataFactory());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUserSnapshotMarketDataFactory());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("CombiningMarketDataFnFactoryComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("classifier").append('=').append(JodaBeanUtils.toString(getClassifier())).append(',').append(' ');
    buf.append("liveMarketDataFactory").append('=').append(JodaBeanUtils.toString(getLiveMarketDataFactory())).append(',').append(' ');
    buf.append("fixedHistoricalMarketDataFactory").append('=').append(JodaBeanUtils.toString(getFixedHistoricalMarketDataFactory())).append(',').append(' ');
    buf.append("userSnapshotMarketDataFactory").append('=').append(JodaBeanUtils.toString(getUserSnapshotMarketDataFactory())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CombiningMarketDataFnFactoryComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", CombiningMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code liveMarketDataFactory} property.
     */
    private final MetaProperty<LiveMarketDataFactory> _liveMarketDataFactory = DirectMetaProperty.ofReadWrite(
        this, "liveMarketDataFactory", CombiningMarketDataFnFactoryComponentFactory.class, LiveMarketDataFactory.class);
    /**
     * The meta-property for the {@code fixedHistoricalMarketDataFactory} property.
     */
    private final MetaProperty<FixedHistoricalMarketDataFactory> _fixedHistoricalMarketDataFactory = DirectMetaProperty.ofReadWrite(
        this, "fixedHistoricalMarketDataFactory", CombiningMarketDataFnFactoryComponentFactory.class, FixedHistoricalMarketDataFactory.class);
    /**
     * The meta-property for the {@code userSnapshotMarketDataFactory} property.
     */
    private final MetaProperty<SnapshotMarketDataFactory> _userSnapshotMarketDataFactory = DirectMetaProperty.ofReadWrite(
        this, "userSnapshotMarketDataFactory", CombiningMarketDataFnFactoryComponentFactory.class, SnapshotMarketDataFactory.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "liveMarketDataFactory",
        "fixedHistoricalMarketDataFactory",
        "userSnapshotMarketDataFactory");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case 855711896:  // liveMarketDataFactory
          return _liveMarketDataFactory;
        case 748954726:  // fixedHistoricalMarketDataFactory
          return _fixedHistoricalMarketDataFactory;
        case 591332661:  // userSnapshotMarketDataFactory
          return _userSnapshotMarketDataFactory;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CombiningMarketDataFnFactoryComponentFactory> builder() {
      return new DirectBeanBuilder<CombiningMarketDataFnFactoryComponentFactory>(new CombiningMarketDataFnFactoryComponentFactory());
    }

    @Override
    public Class<? extends CombiningMarketDataFnFactoryComponentFactory> beanType() {
      return CombiningMarketDataFnFactoryComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code liveMarketDataFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LiveMarketDataFactory> liveMarketDataFactory() {
      return _liveMarketDataFactory;
    }

    /**
     * The meta-property for the {@code fixedHistoricalMarketDataFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FixedHistoricalMarketDataFactory> fixedHistoricalMarketDataFactory() {
      return _fixedHistoricalMarketDataFactory;
    }

    /**
     * The meta-property for the {@code userSnapshotMarketDataFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SnapshotMarketDataFactory> userSnapshotMarketDataFactory() {
      return _userSnapshotMarketDataFactory;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getClassifier();
        case 855711896:  // liveMarketDataFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getLiveMarketDataFactory();
        case 748954726:  // fixedHistoricalMarketDataFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getFixedHistoricalMarketDataFactory();
        case 591332661:  // userSnapshotMarketDataFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getUserSnapshotMarketDataFactory();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setClassifier((String) newValue);
          return;
        case 855711896:  // liveMarketDataFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setLiveMarketDataFactory((LiveMarketDataFactory) newValue);
          return;
        case 748954726:  // fixedHistoricalMarketDataFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setFixedHistoricalMarketDataFactory((FixedHistoricalMarketDataFactory) newValue);
          return;
        case 591332661:  // userSnapshotMarketDataFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setUserSnapshotMarketDataFactory((SnapshotMarketDataFactory) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((CombiningMarketDataFnFactoryComponentFactory) bean)._classifier, "classifier");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
