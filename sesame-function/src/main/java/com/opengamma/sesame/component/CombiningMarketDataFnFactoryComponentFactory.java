/**
 * Copyright (C) 2014 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sesame.component;

import java.util.LinkedHashMap;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.component.ComponentRepository;
import com.opengamma.component.factory.AbstractComponentFactory;
import com.opengamma.sesame.marketdata.FixedHistoricalMarketDataFnFactory;
import com.opengamma.sesame.marketdata.LiveMarketDataFnFactory;
import com.opengamma.sesame.marketdata.MarketDataFnFactory;
import com.opengamma.sesame.marketdata.TypeDelegatingMarketDataFnFactory;
import com.opengamma.sesame.marketdata.UserSnapshotMarketDataFnFactory;

/**
 * Creates a combined market data function factory from a set of individual
 * market data function factories.
 */
@BeanDefinition
public class CombiningMarketDataFnFactoryComponentFactory extends AbstractComponentFactory {

  /**
   * The classifier that the factory should publish under.
   */
  @PropertyDefinition(validate = "notNull")
  private String _classifier;

  /**
   * The LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   */
  @PropertyDefinition
  private LiveMarketDataFnFactory _liveMarketDataFnFactory;

  /**
   * The FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   */
  @PropertyDefinition
  private FixedHistoricalMarketDataFnFactory _fixedHistoricalMarketDataFnFactory;

  /**
   * The UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   */
  @PropertyDefinition
  private UserSnapshotMarketDataFnFactory _userSnapshotMarketDataFnFactory;

  @Override
  public void init(ComponentRepository repo, LinkedHashMap<String, String> configuration) throws Exception {

    TypeDelegatingMarketDataFnFactory.Builder builder = TypeDelegatingMarketDataFnFactory.builder();

    if (_liveMarketDataFnFactory != null) {
      builder.live(_liveMarketDataFnFactory);
    }
    if (_fixedHistoricalMarketDataFnFactory != null) {
      builder.fixedHistorical(_fixedHistoricalMarketDataFnFactory);
    }
    if (_userSnapshotMarketDataFnFactory != null) {
      builder.snapshot(_userSnapshotMarketDataFnFactory);
    }

    repo.registerComponent(MarketDataFnFactory.class, _classifier, builder.build());
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code CombiningMarketDataFnFactoryComponentFactory}.
   * @return the meta-bean, not null
   */
  public static CombiningMarketDataFnFactoryComponentFactory.Meta meta() {
    return CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE);
  }

  @Override
  public CombiningMarketDataFnFactoryComponentFactory.Meta metaBean() {
    return CombiningMarketDataFnFactoryComponentFactory.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the classifier that the factory should publish under.
   * @return the value of the property, not null
   */
  public String getClassifier() {
    return _classifier;
  }

  /**
   * Sets the classifier that the factory should publish under.
   * @param classifier  the new value of the property, not null
   */
  public void setClassifier(String classifier) {
    JodaBeanUtils.notNull(classifier, "classifier");
    this._classifier = classifier;
  }

  /**
   * Gets the the {@code classifier} property.
   * @return the property, not null
   */
  public final Property<String> classifier() {
    return metaBean().classifier().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @return the value of the property
   */
  public LiveMarketDataFnFactory getLiveMarketDataFnFactory() {
    return _liveMarketDataFnFactory;
  }

  /**
   * Sets the LiveMarketDataFnFactory to use. If null, then it will not
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @param liveMarketDataFnFactory  the new value of the property
   */
  public void setLiveMarketDataFnFactory(LiveMarketDataFnFactory liveMarketDataFnFactory) {
    this._liveMarketDataFnFactory = liveMarketDataFnFactory;
  }

  /**
   * Gets the the {@code liveMarketDataFnFactory} property.
   * be possible to access live data via the MarketDataFnFactory
   * created by this factory.
   * @return the property, not null
   */
  public final Property<LiveMarketDataFnFactory> liveMarketDataFnFactory() {
    return metaBean().liveMarketDataFnFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @return the value of the property
   */
  public FixedHistoricalMarketDataFnFactory getFixedHistoricalMarketDataFnFactory() {
    return _fixedHistoricalMarketDataFnFactory;
  }

  /**
   * Sets the FixedHistoricalMarketDataFnFactory to use. If null, then
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @param fixedHistoricalMarketDataFnFactory  the new value of the property
   */
  public void setFixedHistoricalMarketDataFnFactory(FixedHistoricalMarketDataFnFactory fixedHistoricalMarketDataFnFactory) {
    this._fixedHistoricalMarketDataFnFactory = fixedHistoricalMarketDataFnFactory;
  }

  /**
   * Gets the the {@code fixedHistoricalMarketDataFnFactory} property.
   * it will not be possible to access historical data via the
   * MarketDataFnFactory created by this factory.
   * @return the property, not null
   */
  public final Property<FixedHistoricalMarketDataFnFactory> fixedHistoricalMarketDataFnFactory() {
    return metaBean().fixedHistoricalMarketDataFnFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @return the value of the property
   */
  public UserSnapshotMarketDataFnFactory getUserSnapshotMarketDataFnFactory() {
    return _userSnapshotMarketDataFnFactory;
  }

  /**
   * Sets the UserSnapshotMarketDataFnFactory to use. If null, then
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @param userSnapshotMarketDataFnFactory  the new value of the property
   */
  public void setUserSnapshotMarketDataFnFactory(UserSnapshotMarketDataFnFactory userSnapshotMarketDataFnFactory) {
    this._userSnapshotMarketDataFnFactory = userSnapshotMarketDataFnFactory;
  }

  /**
   * Gets the the {@code userSnapshotMarketDataFnFactory} property.
   * it will not be possible to access snapshot data via the
   * MarketDataFnFactory created by this factory.
   * @return the property, not null
   */
  public final Property<UserSnapshotMarketDataFnFactory> userSnapshotMarketDataFnFactory() {
    return metaBean().userSnapshotMarketDataFnFactory().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public CombiningMarketDataFnFactoryComponentFactory clone() {
    return (CombiningMarketDataFnFactoryComponentFactory) super.clone();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      CombiningMarketDataFnFactoryComponentFactory other = (CombiningMarketDataFnFactoryComponentFactory) obj;
      return JodaBeanUtils.equal(getClassifier(), other.getClassifier()) &&
          JodaBeanUtils.equal(getLiveMarketDataFnFactory(), other.getLiveMarketDataFnFactory()) &&
          JodaBeanUtils.equal(getFixedHistoricalMarketDataFnFactory(), other.getFixedHistoricalMarketDataFnFactory()) &&
          JodaBeanUtils.equal(getUserSnapshotMarketDataFnFactory(), other.getUserSnapshotMarketDataFnFactory()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getClassifier());
    hash += hash * 31 + JodaBeanUtils.hashCode(getLiveMarketDataFnFactory());
    hash += hash * 31 + JodaBeanUtils.hashCode(getFixedHistoricalMarketDataFnFactory());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUserSnapshotMarketDataFnFactory());
    return hash ^ super.hashCode();
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("CombiningMarketDataFnFactoryComponentFactory{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  @Override
  protected void toString(StringBuilder buf) {
    super.toString(buf);
    buf.append("classifier").append('=').append(JodaBeanUtils.toString(getClassifier())).append(',').append(' ');
    buf.append("liveMarketDataFnFactory").append('=').append(JodaBeanUtils.toString(getLiveMarketDataFnFactory())).append(',').append(' ');
    buf.append("fixedHistoricalMarketDataFnFactory").append('=').append(JodaBeanUtils.toString(getFixedHistoricalMarketDataFnFactory())).append(',').append(' ');
    buf.append("userSnapshotMarketDataFnFactory").append('=').append(JodaBeanUtils.toString(getUserSnapshotMarketDataFnFactory())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code CombiningMarketDataFnFactoryComponentFactory}.
   */
  public static class Meta extends AbstractComponentFactory.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code classifier} property.
     */
    private final MetaProperty<String> _classifier = DirectMetaProperty.ofReadWrite(
        this, "classifier", CombiningMarketDataFnFactoryComponentFactory.class, String.class);
    /**
     * The meta-property for the {@code liveMarketDataFnFactory} property.
     */
    private final MetaProperty<LiveMarketDataFnFactory> _liveMarketDataFnFactory = DirectMetaProperty.ofReadWrite(
        this, "liveMarketDataFnFactory", CombiningMarketDataFnFactoryComponentFactory.class, LiveMarketDataFnFactory.class);
    /**
     * The meta-property for the {@code fixedHistoricalMarketDataFnFactory} property.
     */
    private final MetaProperty<FixedHistoricalMarketDataFnFactory> _fixedHistoricalMarketDataFnFactory = DirectMetaProperty.ofReadWrite(
        this, "fixedHistoricalMarketDataFnFactory", CombiningMarketDataFnFactoryComponentFactory.class, FixedHistoricalMarketDataFnFactory.class);
    /**
     * The meta-property for the {@code userSnapshotMarketDataFnFactory} property.
     */
    private final MetaProperty<UserSnapshotMarketDataFnFactory> _userSnapshotMarketDataFnFactory = DirectMetaProperty.ofReadWrite(
        this, "userSnapshotMarketDataFnFactory", CombiningMarketDataFnFactoryComponentFactory.class, UserSnapshotMarketDataFnFactory.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "classifier",
        "liveMarketDataFnFactory",
        "fixedHistoricalMarketDataFnFactory",
        "userSnapshotMarketDataFnFactory");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return _classifier;
        case -1635676368:  // liveMarketDataFnFactory
          return _liveMarketDataFnFactory;
        case -1150101634:  // fixedHistoricalMarketDataFnFactory
          return _fixedHistoricalMarketDataFnFactory;
        case 1993916557:  // userSnapshotMarketDataFnFactory
          return _userSnapshotMarketDataFnFactory;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends CombiningMarketDataFnFactoryComponentFactory> builder() {
      return new DirectBeanBuilder<CombiningMarketDataFnFactoryComponentFactory>(new CombiningMarketDataFnFactoryComponentFactory());
    }

    @Override
    public Class<? extends CombiningMarketDataFnFactoryComponentFactory> beanType() {
      return CombiningMarketDataFnFactoryComponentFactory.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code classifier} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> classifier() {
      return _classifier;
    }

    /**
     * The meta-property for the {@code liveMarketDataFnFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<LiveMarketDataFnFactory> liveMarketDataFnFactory() {
      return _liveMarketDataFnFactory;
    }

    /**
     * The meta-property for the {@code fixedHistoricalMarketDataFnFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<FixedHistoricalMarketDataFnFactory> fixedHistoricalMarketDataFnFactory() {
      return _fixedHistoricalMarketDataFnFactory;
    }

    /**
     * The meta-property for the {@code userSnapshotMarketDataFnFactory} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UserSnapshotMarketDataFnFactory> userSnapshotMarketDataFnFactory() {
      return _userSnapshotMarketDataFnFactory;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getClassifier();
        case -1635676368:  // liveMarketDataFnFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getLiveMarketDataFnFactory();
        case -1150101634:  // fixedHistoricalMarketDataFnFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getFixedHistoricalMarketDataFnFactory();
        case 1993916557:  // userSnapshotMarketDataFnFactory
          return ((CombiningMarketDataFnFactoryComponentFactory) bean).getUserSnapshotMarketDataFnFactory();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -281470431:  // classifier
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setClassifier((String) newValue);
          return;
        case -1635676368:  // liveMarketDataFnFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setLiveMarketDataFnFactory((LiveMarketDataFnFactory) newValue);
          return;
        case -1150101634:  // fixedHistoricalMarketDataFnFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setFixedHistoricalMarketDataFnFactory((FixedHistoricalMarketDataFnFactory) newValue);
          return;
        case 1993916557:  // userSnapshotMarketDataFnFactory
          ((CombiningMarketDataFnFactoryComponentFactory) bean).setUserSnapshotMarketDataFnFactory((UserSnapshotMarketDataFnFactory) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

    @Override
    protected void validate(Bean bean) {
      JodaBeanUtils.notNull(((CombiningMarketDataFnFactoryComponentFactory) bean)._classifier, "classifier");
      super.validate(bean);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
